// Code generated by ent, DO NOT EDIT.

package ipaccesscontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the ipaccesscontrol type in the database.
	Label = "ip_access_control"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldTCPStage holds the string denoting the tcp_stage field in the database.
	FieldTCPStage = "tcp_stage"
	// FieldTCPLive holds the string denoting the tcp_live field in the database.
	FieldTCPLive = "tcp_live"
	// FieldRabbitmqStage holds the string denoting the rabbitmq_stage field in the database.
	FieldRabbitmqStage = "rabbitmq_stage"
	// FieldRabbitmqLive holds the string denoting the rabbitmq_live field in the database.
	FieldRabbitmqLive = "rabbitmq_live"
	// FieldTranslationsRmq holds the string denoting the translations_rmq field in the database.
	FieldTranslationsRmq = "translations_rmq"
	// FieldTranslationsTCP holds the string denoting the translations_tcp field in the database.
	FieldTranslationsTCP = "translations_tcp"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// Table holds the table name of the ipaccesscontrol in the database.
	Table = "ip_access_controls"
)

// Columns holds all SQL columns for ipaccesscontrol fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldIPAddress,
	FieldTCPStage,
	FieldTCPLive,
	FieldRabbitmqStage,
	FieldRabbitmqLive,
	FieldTranslationsRmq,
	FieldTranslationsTCP,
	FieldActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTCPStage holds the default value on creation for the "tcp_stage" field.
	DefaultTCPStage bool
	// DefaultTCPLive holds the default value on creation for the "tcp_live" field.
	DefaultTCPLive bool
	// DefaultRabbitmqStage holds the default value on creation for the "rabbitmq_stage" field.
	DefaultRabbitmqStage bool
	// DefaultRabbitmqLive holds the default value on creation for the "rabbitmq_live" field.
	DefaultRabbitmqLive bool
	// DefaultTranslationsRmq holds the default value on creation for the "translations_rmq" field.
	DefaultTranslationsRmq bool
	// DefaultTranslationsTCP holds the default value on creation for the "translations_tcp" field.
	DefaultTranslationsTCP bool
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the IPAccessControl queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByTCPStage orders the results by the tcp_stage field.
func ByTCPStage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTCPStage, opts...).ToFunc()
}

// ByTCPLive orders the results by the tcp_live field.
func ByTCPLive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTCPLive, opts...).ToFunc()
}

// ByRabbitmqStage orders the results by the rabbitmq_stage field.
func ByRabbitmqStage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRabbitmqStage, opts...).ToFunc()
}

// ByRabbitmqLive orders the results by the rabbitmq_live field.
func ByRabbitmqLive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRabbitmqLive, opts...).ToFunc()
}

// ByTranslationsRmq orders the results by the translations_rmq field.
func ByTranslationsRmq(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTranslationsRmq, opts...).ToFunc()
}

// ByTranslationsTCP orders the results by the translations_tcp field.
func ByTranslationsTCP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTranslationsTCP, opts...).ToFunc()
}

// ByActive orders the results by the active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}
