// Code generated by ent, DO NOT EDIT.

package ipaccesscontrol

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/khuongdo95/go-service/internal/generated/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldUpdatedBy, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldIPAddress, v))
}

// TCPStage applies equality check predicate on the "tcp_stage" field. It's identical to TCPStageEQ.
func TCPStage(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldTCPStage, v))
}

// TCPLive applies equality check predicate on the "tcp_live" field. It's identical to TCPLiveEQ.
func TCPLive(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldTCPLive, v))
}

// RabbitmqStage applies equality check predicate on the "rabbitmq_stage" field. It's identical to RabbitmqStageEQ.
func RabbitmqStage(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldRabbitmqStage, v))
}

// RabbitmqLive applies equality check predicate on the "rabbitmq_live" field. It's identical to RabbitmqLiveEQ.
func RabbitmqLive(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldRabbitmqLive, v))
}

// TranslationsRmq applies equality check predicate on the "translations_rmq" field. It's identical to TranslationsRmqEQ.
func TranslationsRmq(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldTranslationsRmq, v))
}

// TranslationsTCP applies equality check predicate on the "translations_tcp" field. It's identical to TranslationsTCPEQ.
func TranslationsTCP(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldTranslationsTCP, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldContainsFold(FieldIPAddress, v))
}

// TCPStageEQ applies the EQ predicate on the "tcp_stage" field.
func TCPStageEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldTCPStage, v))
}

// TCPStageNEQ applies the NEQ predicate on the "tcp_stage" field.
func TCPStageNEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldTCPStage, v))
}

// TCPLiveEQ applies the EQ predicate on the "tcp_live" field.
func TCPLiveEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldTCPLive, v))
}

// TCPLiveNEQ applies the NEQ predicate on the "tcp_live" field.
func TCPLiveNEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldTCPLive, v))
}

// RabbitmqStageEQ applies the EQ predicate on the "rabbitmq_stage" field.
func RabbitmqStageEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldRabbitmqStage, v))
}

// RabbitmqStageNEQ applies the NEQ predicate on the "rabbitmq_stage" field.
func RabbitmqStageNEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldRabbitmqStage, v))
}

// RabbitmqLiveEQ applies the EQ predicate on the "rabbitmq_live" field.
func RabbitmqLiveEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldRabbitmqLive, v))
}

// RabbitmqLiveNEQ applies the NEQ predicate on the "rabbitmq_live" field.
func RabbitmqLiveNEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldRabbitmqLive, v))
}

// TranslationsRmqEQ applies the EQ predicate on the "translations_rmq" field.
func TranslationsRmqEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldTranslationsRmq, v))
}

// TranslationsRmqNEQ applies the NEQ predicate on the "translations_rmq" field.
func TranslationsRmqNEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldTranslationsRmq, v))
}

// TranslationsTCPEQ applies the EQ predicate on the "translations_tcp" field.
func TranslationsTCPEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldTranslationsTCP, v))
}

// TranslationsTCPNEQ applies the NEQ predicate on the "translations_tcp" field.
func TranslationsTCPNEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldTranslationsTCP, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.FieldNEQ(FieldActive, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IPAccessControl) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IPAccessControl) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IPAccessControl) predicate.IPAccessControl {
	return predicate.IPAccessControl(sql.NotPredicates(p))
}
