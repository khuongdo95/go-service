// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khuongdo95/go-service/internal/generated/ent/predicate"
	"github.com/khuongdo95/go-service/internal/generated/ent/user"
	"github.com/khuongdo95/go-service/internal/generated/ent/useripwhitelist"
)

// UserIpWhiteListUpdate is the builder for updating UserIpWhiteList entities.
type UserIpWhiteListUpdate struct {
	config
	hooks    []Hook
	mutation *UserIpWhiteListMutation
}

// Where appends a list predicates to the UserIpWhiteListUpdate builder.
func (uiwlu *UserIpWhiteListUpdate) Where(ps ...predicate.UserIpWhiteList) *UserIpWhiteListUpdate {
	uiwlu.mutation.Where(ps...)
	return uiwlu
}

// SetUpdatedAt sets the "updated_at" field.
func (uiwlu *UserIpWhiteListUpdate) SetUpdatedAt(t time.Time) *UserIpWhiteListUpdate {
	uiwlu.mutation.SetUpdatedAt(t)
	return uiwlu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uiwlu *UserIpWhiteListUpdate) ClearUpdatedAt() *UserIpWhiteListUpdate {
	uiwlu.mutation.ClearUpdatedAt()
	return uiwlu
}

// SetUserID sets the "user_id" field.
func (uiwlu *UserIpWhiteListUpdate) SetUserID(s string) *UserIpWhiteListUpdate {
	uiwlu.mutation.SetUserID(s)
	return uiwlu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uiwlu *UserIpWhiteListUpdate) SetNillableUserID(s *string) *UserIpWhiteListUpdate {
	if s != nil {
		uiwlu.SetUserID(*s)
	}
	return uiwlu
}

// SetIPAddress sets the "ip_address" field.
func (uiwlu *UserIpWhiteListUpdate) SetIPAddress(s string) *UserIpWhiteListUpdate {
	uiwlu.mutation.SetIPAddress(s)
	return uiwlu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (uiwlu *UserIpWhiteListUpdate) SetNillableIPAddress(s *string) *UserIpWhiteListUpdate {
	if s != nil {
		uiwlu.SetIPAddress(*s)
	}
	return uiwlu
}

// SetUser sets the "user" edge to the User entity.
func (uiwlu *UserIpWhiteListUpdate) SetUser(u *User) *UserIpWhiteListUpdate {
	return uiwlu.SetUserID(u.ID)
}

// Mutation returns the UserIpWhiteListMutation object of the builder.
func (uiwlu *UserIpWhiteListUpdate) Mutation() *UserIpWhiteListMutation {
	return uiwlu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uiwlu *UserIpWhiteListUpdate) ClearUser() *UserIpWhiteListUpdate {
	uiwlu.mutation.ClearUser()
	return uiwlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiwlu *UserIpWhiteListUpdate) Save(ctx context.Context) (int, error) {
	uiwlu.defaults()
	return withHooks(ctx, uiwlu.sqlSave, uiwlu.mutation, uiwlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiwlu *UserIpWhiteListUpdate) SaveX(ctx context.Context) int {
	affected, err := uiwlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiwlu *UserIpWhiteListUpdate) Exec(ctx context.Context) error {
	_, err := uiwlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiwlu *UserIpWhiteListUpdate) ExecX(ctx context.Context) {
	if err := uiwlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiwlu *UserIpWhiteListUpdate) defaults() {
	if _, ok := uiwlu.mutation.UpdatedAt(); !ok && !uiwlu.mutation.UpdatedAtCleared() {
		v := useripwhitelist.UpdateDefaultUpdatedAt()
		uiwlu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiwlu *UserIpWhiteListUpdate) check() error {
	if uiwlu.mutation.UserCleared() && len(uiwlu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserIpWhiteList.user"`)
	}
	return nil
}

func (uiwlu *UserIpWhiteListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uiwlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useripwhitelist.Table, useripwhitelist.Columns, sqlgraph.NewFieldSpec(useripwhitelist.FieldID, field.TypeInt))
	if ps := uiwlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiwlu.mutation.UpdatedAt(); ok {
		_spec.SetField(useripwhitelist.FieldUpdatedAt, field.TypeTime, value)
	}
	if uiwlu.mutation.UpdatedAtCleared() {
		_spec.ClearField(useripwhitelist.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uiwlu.mutation.IPAddress(); ok {
		_spec.SetField(useripwhitelist.FieldIPAddress, field.TypeString, value)
	}
	if uiwlu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useripwhitelist.UserTable,
			Columns: []string{useripwhitelist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiwlu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useripwhitelist.UserTable,
			Columns: []string{useripwhitelist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiwlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useripwhitelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uiwlu.mutation.done = true
	return n, nil
}

// UserIpWhiteListUpdateOne is the builder for updating a single UserIpWhiteList entity.
type UserIpWhiteListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserIpWhiteListMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uiwluo *UserIpWhiteListUpdateOne) SetUpdatedAt(t time.Time) *UserIpWhiteListUpdateOne {
	uiwluo.mutation.SetUpdatedAt(t)
	return uiwluo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uiwluo *UserIpWhiteListUpdateOne) ClearUpdatedAt() *UserIpWhiteListUpdateOne {
	uiwluo.mutation.ClearUpdatedAt()
	return uiwluo
}

// SetUserID sets the "user_id" field.
func (uiwluo *UserIpWhiteListUpdateOne) SetUserID(s string) *UserIpWhiteListUpdateOne {
	uiwluo.mutation.SetUserID(s)
	return uiwluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (uiwluo *UserIpWhiteListUpdateOne) SetNillableUserID(s *string) *UserIpWhiteListUpdateOne {
	if s != nil {
		uiwluo.SetUserID(*s)
	}
	return uiwluo
}

// SetIPAddress sets the "ip_address" field.
func (uiwluo *UserIpWhiteListUpdateOne) SetIPAddress(s string) *UserIpWhiteListUpdateOne {
	uiwluo.mutation.SetIPAddress(s)
	return uiwluo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (uiwluo *UserIpWhiteListUpdateOne) SetNillableIPAddress(s *string) *UserIpWhiteListUpdateOne {
	if s != nil {
		uiwluo.SetIPAddress(*s)
	}
	return uiwluo
}

// SetUser sets the "user" edge to the User entity.
func (uiwluo *UserIpWhiteListUpdateOne) SetUser(u *User) *UserIpWhiteListUpdateOne {
	return uiwluo.SetUserID(u.ID)
}

// Mutation returns the UserIpWhiteListMutation object of the builder.
func (uiwluo *UserIpWhiteListUpdateOne) Mutation() *UserIpWhiteListMutation {
	return uiwluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uiwluo *UserIpWhiteListUpdateOne) ClearUser() *UserIpWhiteListUpdateOne {
	uiwluo.mutation.ClearUser()
	return uiwluo
}

// Where appends a list predicates to the UserIpWhiteListUpdate builder.
func (uiwluo *UserIpWhiteListUpdateOne) Where(ps ...predicate.UserIpWhiteList) *UserIpWhiteListUpdateOne {
	uiwluo.mutation.Where(ps...)
	return uiwluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiwluo *UserIpWhiteListUpdateOne) Select(field string, fields ...string) *UserIpWhiteListUpdateOne {
	uiwluo.fields = append([]string{field}, fields...)
	return uiwluo
}

// Save executes the query and returns the updated UserIpWhiteList entity.
func (uiwluo *UserIpWhiteListUpdateOne) Save(ctx context.Context) (*UserIpWhiteList, error) {
	uiwluo.defaults()
	return withHooks(ctx, uiwluo.sqlSave, uiwluo.mutation, uiwluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiwluo *UserIpWhiteListUpdateOne) SaveX(ctx context.Context) *UserIpWhiteList {
	node, err := uiwluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiwluo *UserIpWhiteListUpdateOne) Exec(ctx context.Context) error {
	_, err := uiwluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiwluo *UserIpWhiteListUpdateOne) ExecX(ctx context.Context) {
	if err := uiwluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiwluo *UserIpWhiteListUpdateOne) defaults() {
	if _, ok := uiwluo.mutation.UpdatedAt(); !ok && !uiwluo.mutation.UpdatedAtCleared() {
		v := useripwhitelist.UpdateDefaultUpdatedAt()
		uiwluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiwluo *UserIpWhiteListUpdateOne) check() error {
	if uiwluo.mutation.UserCleared() && len(uiwluo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserIpWhiteList.user"`)
	}
	return nil
}

func (uiwluo *UserIpWhiteListUpdateOne) sqlSave(ctx context.Context) (_node *UserIpWhiteList, err error) {
	if err := uiwluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useripwhitelist.Table, useripwhitelist.Columns, sqlgraph.NewFieldSpec(useripwhitelist.FieldID, field.TypeInt))
	id, ok := uiwluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserIpWhiteList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uiwluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useripwhitelist.FieldID)
		for _, f := range fields {
			if !useripwhitelist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useripwhitelist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiwluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiwluo.mutation.UpdatedAt(); ok {
		_spec.SetField(useripwhitelist.FieldUpdatedAt, field.TypeTime, value)
	}
	if uiwluo.mutation.UpdatedAtCleared() {
		_spec.ClearField(useripwhitelist.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uiwluo.mutation.IPAddress(); ok {
		_spec.SetField(useripwhitelist.FieldIPAddress, field.TypeString, value)
	}
	if uiwluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useripwhitelist.UserTable,
			Columns: []string{useripwhitelist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uiwluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useripwhitelist.UserTable,
			Columns: []string{useripwhitelist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserIpWhiteList{config: uiwluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiwluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useripwhitelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uiwluo.mutation.done = true
	return _node, nil
}
