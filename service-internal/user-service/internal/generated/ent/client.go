// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/khuongdo95/go-service/internal/generated/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/khuongdo95/go-service/internal/generated/ent/identity"
	"github.com/khuongdo95/go-service/internal/generated/ent/ipaccesscontrol"
	"github.com/khuongdo95/go-service/internal/generated/ent/user"
	"github.com/khuongdo95/go-service/internal/generated/ent/useripwhitelist"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// IPAccessControl is the client for interacting with the IPAccessControl builders.
	IPAccessControl *IPAccessControlClient
	// Identity is the client for interacting with the Identity builders.
	Identity *IdentityClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserIpWhiteList is the client for interacting with the UserIpWhiteList builders.
	UserIpWhiteList *UserIpWhiteListClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.IPAccessControl = NewIPAccessControlClient(c.config)
	c.Identity = NewIdentityClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserIpWhiteList = NewUserIpWhiteListClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		IPAccessControl: NewIPAccessControlClient(cfg),
		Identity:        NewIdentityClient(cfg),
		User:            NewUserClient(cfg),
		UserIpWhiteList: NewUserIpWhiteListClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		IPAccessControl: NewIPAccessControlClient(cfg),
		Identity:        NewIdentityClient(cfg),
		User:            NewUserClient(cfg),
		UserIpWhiteList: NewUserIpWhiteListClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		IPAccessControl.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.IPAccessControl.Use(hooks...)
	c.Identity.Use(hooks...)
	c.User.Use(hooks...)
	c.UserIpWhiteList.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.IPAccessControl.Intercept(interceptors...)
	c.Identity.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.UserIpWhiteList.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *IPAccessControlMutation:
		return c.IPAccessControl.mutate(ctx, m)
	case *IdentityMutation:
		return c.Identity.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserIpWhiteListMutation:
		return c.UserIpWhiteList.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// IPAccessControlClient is a client for the IPAccessControl schema.
type IPAccessControlClient struct {
	config
}

// NewIPAccessControlClient returns a client for the IPAccessControl from the given config.
func NewIPAccessControlClient(c config) *IPAccessControlClient {
	return &IPAccessControlClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ipaccesscontrol.Hooks(f(g(h())))`.
func (c *IPAccessControlClient) Use(hooks ...Hook) {
	c.hooks.IPAccessControl = append(c.hooks.IPAccessControl, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ipaccesscontrol.Intercept(f(g(h())))`.
func (c *IPAccessControlClient) Intercept(interceptors ...Interceptor) {
	c.inters.IPAccessControl = append(c.inters.IPAccessControl, interceptors...)
}

// Create returns a builder for creating a IPAccessControl entity.
func (c *IPAccessControlClient) Create() *IPAccessControlCreate {
	mutation := newIPAccessControlMutation(c.config, OpCreate)
	return &IPAccessControlCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IPAccessControl entities.
func (c *IPAccessControlClient) CreateBulk(builders ...*IPAccessControlCreate) *IPAccessControlCreateBulk {
	return &IPAccessControlCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IPAccessControlClient) MapCreateBulk(slice any, setFunc func(*IPAccessControlCreate, int)) *IPAccessControlCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IPAccessControlCreateBulk{err: fmt.Errorf("calling to IPAccessControlClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IPAccessControlCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IPAccessControlCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IPAccessControl.
func (c *IPAccessControlClient) Update() *IPAccessControlUpdate {
	mutation := newIPAccessControlMutation(c.config, OpUpdate)
	return &IPAccessControlUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IPAccessControlClient) UpdateOne(iac *IPAccessControl) *IPAccessControlUpdateOne {
	mutation := newIPAccessControlMutation(c.config, OpUpdateOne, withIPAccessControl(iac))
	return &IPAccessControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IPAccessControlClient) UpdateOneID(id int64) *IPAccessControlUpdateOne {
	mutation := newIPAccessControlMutation(c.config, OpUpdateOne, withIPAccessControlID(id))
	return &IPAccessControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IPAccessControl.
func (c *IPAccessControlClient) Delete() *IPAccessControlDelete {
	mutation := newIPAccessControlMutation(c.config, OpDelete)
	return &IPAccessControlDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IPAccessControlClient) DeleteOne(iac *IPAccessControl) *IPAccessControlDeleteOne {
	return c.DeleteOneID(iac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IPAccessControlClient) DeleteOneID(id int64) *IPAccessControlDeleteOne {
	builder := c.Delete().Where(ipaccesscontrol.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IPAccessControlDeleteOne{builder}
}

// Query returns a query builder for IPAccessControl.
func (c *IPAccessControlClient) Query() *IPAccessControlQuery {
	return &IPAccessControlQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIPAccessControl},
		inters: c.Interceptors(),
	}
}

// Get returns a IPAccessControl entity by its id.
func (c *IPAccessControlClient) Get(ctx context.Context, id int64) (*IPAccessControl, error) {
	return c.Query().Where(ipaccesscontrol.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IPAccessControlClient) GetX(ctx context.Context, id int64) *IPAccessControl {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IPAccessControlClient) Hooks() []Hook {
	return c.hooks.IPAccessControl
}

// Interceptors returns the client interceptors.
func (c *IPAccessControlClient) Interceptors() []Interceptor {
	return c.inters.IPAccessControl
}

func (c *IPAccessControlClient) mutate(ctx context.Context, m *IPAccessControlMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IPAccessControlCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IPAccessControlUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IPAccessControlUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IPAccessControlDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IPAccessControl mutation op: %q", m.Op())
	}
}

// IdentityClient is a client for the Identity schema.
type IdentityClient struct {
	config
}

// NewIdentityClient returns a client for the Identity from the given config.
func NewIdentityClient(c config) *IdentityClient {
	return &IdentityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `identity.Hooks(f(g(h())))`.
func (c *IdentityClient) Use(hooks ...Hook) {
	c.hooks.Identity = append(c.hooks.Identity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `identity.Intercept(f(g(h())))`.
func (c *IdentityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Identity = append(c.inters.Identity, interceptors...)
}

// Create returns a builder for creating a Identity entity.
func (c *IdentityClient) Create() *IdentityCreate {
	mutation := newIdentityMutation(c.config, OpCreate)
	return &IdentityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Identity entities.
func (c *IdentityClient) CreateBulk(builders ...*IdentityCreate) *IdentityCreateBulk {
	return &IdentityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IdentityClient) MapCreateBulk(slice any, setFunc func(*IdentityCreate, int)) *IdentityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IdentityCreateBulk{err: fmt.Errorf("calling to IdentityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IdentityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IdentityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Identity.
func (c *IdentityClient) Update() *IdentityUpdate {
	mutation := newIdentityMutation(c.config, OpUpdate)
	return &IdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdentityClient) UpdateOne(i *Identity) *IdentityUpdateOne {
	mutation := newIdentityMutation(c.config, OpUpdateOne, withIdentity(i))
	return &IdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdentityClient) UpdateOneID(id int) *IdentityUpdateOne {
	mutation := newIdentityMutation(c.config, OpUpdateOne, withIdentityID(id))
	return &IdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Identity.
func (c *IdentityClient) Delete() *IdentityDelete {
	mutation := newIdentityMutation(c.config, OpDelete)
	return &IdentityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IdentityClient) DeleteOne(i *Identity) *IdentityDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IdentityClient) DeleteOneID(id int) *IdentityDeleteOne {
	builder := c.Delete().Where(identity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdentityDeleteOne{builder}
}

// Query returns a query builder for Identity.
func (c *IdentityClient) Query() *IdentityQuery {
	return &IdentityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIdentity},
		inters: c.Interceptors(),
	}
}

// Get returns a Identity entity by its id.
func (c *IdentityClient) Get(ctx context.Context, id int) (*Identity, error) {
	return c.Query().Where(identity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdentityClient) GetX(ctx context.Context, id int) *Identity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Identity.
func (c *IdentityClient) QueryUser(i *Identity) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(identity.Table, identity.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, identity.UserTable, identity.UserColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IdentityClient) Hooks() []Hook {
	return c.hooks.Identity
}

// Interceptors returns the client interceptors.
func (c *IdentityClient) Interceptors() []Interceptor {
	return c.inters.Identity
}

func (c *IdentityClient) mutate(ctx context.Context, m *IdentityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IdentityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IdentityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IdentityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IdentityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Identity mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIdentity queries the identity edge of a User.
func (c *UserClient) QueryIdentity(u *User) *IdentityQuery {
	query := (&IdentityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(identity.Table, identity.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IdentityTable, user.IdentityColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIPWhiteList queries the ip_white_list edge of a User.
func (c *UserClient) QueryIPWhiteList(u *User) *UserIpWhiteListQuery {
	query := (&UserIpWhiteListClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(useripwhitelist.Table, useripwhitelist.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.IPWhiteListTable, user.IPWhiteListColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	inters := c.inters.User
	return append(inters[:len(inters):len(inters)], user.Interceptors[:]...)
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserIpWhiteListClient is a client for the UserIpWhiteList schema.
type UserIpWhiteListClient struct {
	config
}

// NewUserIpWhiteListClient returns a client for the UserIpWhiteList from the given config.
func NewUserIpWhiteListClient(c config) *UserIpWhiteListClient {
	return &UserIpWhiteListClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `useripwhitelist.Hooks(f(g(h())))`.
func (c *UserIpWhiteListClient) Use(hooks ...Hook) {
	c.hooks.UserIpWhiteList = append(c.hooks.UserIpWhiteList, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `useripwhitelist.Intercept(f(g(h())))`.
func (c *UserIpWhiteListClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserIpWhiteList = append(c.inters.UserIpWhiteList, interceptors...)
}

// Create returns a builder for creating a UserIpWhiteList entity.
func (c *UserIpWhiteListClient) Create() *UserIpWhiteListCreate {
	mutation := newUserIpWhiteListMutation(c.config, OpCreate)
	return &UserIpWhiteListCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserIpWhiteList entities.
func (c *UserIpWhiteListClient) CreateBulk(builders ...*UserIpWhiteListCreate) *UserIpWhiteListCreateBulk {
	return &UserIpWhiteListCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserIpWhiteListClient) MapCreateBulk(slice any, setFunc func(*UserIpWhiteListCreate, int)) *UserIpWhiteListCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserIpWhiteListCreateBulk{err: fmt.Errorf("calling to UserIpWhiteListClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserIpWhiteListCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserIpWhiteListCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserIpWhiteList.
func (c *UserIpWhiteListClient) Update() *UserIpWhiteListUpdate {
	mutation := newUserIpWhiteListMutation(c.config, OpUpdate)
	return &UserIpWhiteListUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserIpWhiteListClient) UpdateOne(uiwl *UserIpWhiteList) *UserIpWhiteListUpdateOne {
	mutation := newUserIpWhiteListMutation(c.config, OpUpdateOne, withUserIpWhiteList(uiwl))
	return &UserIpWhiteListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserIpWhiteListClient) UpdateOneID(id int) *UserIpWhiteListUpdateOne {
	mutation := newUserIpWhiteListMutation(c.config, OpUpdateOne, withUserIpWhiteListID(id))
	return &UserIpWhiteListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserIpWhiteList.
func (c *UserIpWhiteListClient) Delete() *UserIpWhiteListDelete {
	mutation := newUserIpWhiteListMutation(c.config, OpDelete)
	return &UserIpWhiteListDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserIpWhiteListClient) DeleteOne(uiwl *UserIpWhiteList) *UserIpWhiteListDeleteOne {
	return c.DeleteOneID(uiwl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserIpWhiteListClient) DeleteOneID(id int) *UserIpWhiteListDeleteOne {
	builder := c.Delete().Where(useripwhitelist.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserIpWhiteListDeleteOne{builder}
}

// Query returns a query builder for UserIpWhiteList.
func (c *UserIpWhiteListClient) Query() *UserIpWhiteListQuery {
	return &UserIpWhiteListQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserIpWhiteList},
		inters: c.Interceptors(),
	}
}

// Get returns a UserIpWhiteList entity by its id.
func (c *UserIpWhiteListClient) Get(ctx context.Context, id int) (*UserIpWhiteList, error) {
	return c.Query().Where(useripwhitelist.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserIpWhiteListClient) GetX(ctx context.Context, id int) *UserIpWhiteList {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserIpWhiteList.
func (c *UserIpWhiteListClient) QueryUser(uiwl *UserIpWhiteList) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uiwl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(useripwhitelist.Table, useripwhitelist.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useripwhitelist.UserTable, useripwhitelist.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uiwl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserIpWhiteListClient) Hooks() []Hook {
	return c.hooks.UserIpWhiteList
}

// Interceptors returns the client interceptors.
func (c *UserIpWhiteListClient) Interceptors() []Interceptor {
	return c.inters.UserIpWhiteList
}

func (c *UserIpWhiteListClient) mutate(ctx context.Context, m *UserIpWhiteListMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserIpWhiteListCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserIpWhiteListUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserIpWhiteListUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserIpWhiteListDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserIpWhiteList mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		IPAccessControl, Identity, User, UserIpWhiteList []ent.Hook
	}
	inters struct {
		IPAccessControl, Identity, User, UserIpWhiteList []ent.Interceptor
	}
)
