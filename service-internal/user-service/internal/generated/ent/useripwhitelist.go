// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/khuongdo95/go-service/internal/generated/ent/user"
	"github.com/khuongdo95/go-service/internal/generated/ent/useripwhitelist"
)

// UserIpWhiteList is the model entity for the UserIpWhiteList schema.
type UserIpWhiteList struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserIpWhiteListQuery when eager-loading is set.
	Edges        UserIpWhiteListEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserIpWhiteListEdges holds the relations/edges for other nodes in the graph.
type UserIpWhiteListEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserIpWhiteListEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserIpWhiteList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useripwhitelist.FieldID:
			values[i] = new(sql.NullInt64)
		case useripwhitelist.FieldUserID, useripwhitelist.FieldIPAddress:
			values[i] = new(sql.NullString)
		case useripwhitelist.FieldCreatedAt, useripwhitelist.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserIpWhiteList fields.
func (uiwl *UserIpWhiteList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useripwhitelist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uiwl.ID = int(value.Int64)
		case useripwhitelist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uiwl.CreatedAt = value.Time
			}
		case useripwhitelist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uiwl.UpdatedAt = new(time.Time)
				*uiwl.UpdatedAt = value.Time
			}
		case useripwhitelist.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				uiwl.UserID = value.String
			}
		case useripwhitelist.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				uiwl.IPAddress = value.String
			}
		default:
			uiwl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserIpWhiteList.
// This includes values selected through modifiers, order, etc.
func (uiwl *UserIpWhiteList) Value(name string) (ent.Value, error) {
	return uiwl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserIpWhiteList entity.
func (uiwl *UserIpWhiteList) QueryUser() *UserQuery {
	return NewUserIpWhiteListClient(uiwl.config).QueryUser(uiwl)
}

// Update returns a builder for updating this UserIpWhiteList.
// Note that you need to call UserIpWhiteList.Unwrap() before calling this method if this UserIpWhiteList
// was returned from a transaction, and the transaction was committed or rolled back.
func (uiwl *UserIpWhiteList) Update() *UserIpWhiteListUpdateOne {
	return NewUserIpWhiteListClient(uiwl.config).UpdateOne(uiwl)
}

// Unwrap unwraps the UserIpWhiteList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uiwl *UserIpWhiteList) Unwrap() *UserIpWhiteList {
	_tx, ok := uiwl.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserIpWhiteList is not a transactional entity")
	}
	uiwl.config.driver = _tx.drv
	return uiwl
}

// String implements the fmt.Stringer.
func (uiwl *UserIpWhiteList) String() string {
	var builder strings.Builder
	builder.WriteString("UserIpWhiteList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uiwl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uiwl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := uiwl.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(uiwl.UserID)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(uiwl.IPAddress)
	builder.WriteByte(')')
	return builder.String()
}

// UserIpWhiteLists is a parsable slice of UserIpWhiteList.
type UserIpWhiteLists []*UserIpWhiteList
