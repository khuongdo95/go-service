// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khuongdo95/go-service/internal/generated/ent/identity"
	"github.com/khuongdo95/go-service/internal/generated/ent/user"
)

// IdentityCreate is the builder for creating a Identity entity.
type IdentityCreate struct {
	config
	mutation *IdentityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *IdentityCreate) SetCreatedAt(t time.Time) *IdentityCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *IdentityCreate) SetNillableCreatedAt(t *time.Time) *IdentityCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *IdentityCreate) SetUpdatedAt(t time.Time) *IdentityCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *IdentityCreate) SetNillableUpdatedAt(t *time.Time) *IdentityCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetUserID sets the "user_id" field.
func (ic *IdentityCreate) SetUserID(s string) *IdentityCreate {
	ic.mutation.SetUserID(s)
	return ic
}

// SetUsername sets the "username" field.
func (ic *IdentityCreate) SetUsername(s string) *IdentityCreate {
	ic.mutation.SetUsername(s)
	return ic
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ic *IdentityCreate) SetNillableUsername(s *string) *IdentityCreate {
	if s != nil {
		ic.SetUsername(*s)
	}
	return ic
}

// SetPassword sets the "password" field.
func (ic *IdentityCreate) SetPassword(s string) *IdentityCreate {
	ic.mutation.SetPassword(s)
	return ic
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ic *IdentityCreate) SetNillablePassword(s *string) *IdentityCreate {
	if s != nil {
		ic.SetPassword(*s)
	}
	return ic
}

// SetUser sets the "user" edge to the User entity.
func (ic *IdentityCreate) SetUser(u *User) *IdentityCreate {
	return ic.SetUserID(u.ID)
}

// Mutation returns the IdentityMutation object of the builder.
func (ic *IdentityCreate) Mutation() *IdentityMutation {
	return ic.mutation
}

// Save creates the Identity in the database.
func (ic *IdentityCreate) Save(ctx context.Context) (*Identity, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IdentityCreate) SaveX(ctx context.Context) *Identity {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IdentityCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IdentityCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IdentityCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := identity.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IdentityCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Identity.created_at"`)}
	}
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Identity.user_id"`)}
	}
	if len(ic.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Identity.user"`)}
	}
	return nil
}

func (ic *IdentityCreate) sqlSave(ctx context.Context) (*Identity, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IdentityCreate) createSpec() (*Identity, *sqlgraph.CreateSpec) {
	var (
		_node = &Identity{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(identity.Table, sqlgraph.NewFieldSpec(identity.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(identity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(identity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := ic.mutation.Username(); ok {
		_spec.SetField(identity.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ic.mutation.Password(); ok {
		_spec.SetField(identity.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if nodes := ic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   identity.UserTable,
			Columns: []string{identity.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Identity.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IdentityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *IdentityCreate) OnConflict(opts ...sql.ConflictOption) *IdentityUpsertOne {
	ic.conflict = opts
	return &IdentityUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Identity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *IdentityCreate) OnConflictColumns(columns ...string) *IdentityUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &IdentityUpsertOne{
		create: ic,
	}
}

type (
	// IdentityUpsertOne is the builder for "upsert"-ing
	//  one Identity node.
	IdentityUpsertOne struct {
		create *IdentityCreate
	}

	// IdentityUpsert is the "OnConflict" setter.
	IdentityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IdentityUpsert) SetUpdatedAt(v time.Time) *IdentityUpsert {
	u.Set(identity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IdentityUpsert) UpdateUpdatedAt() *IdentityUpsert {
	u.SetExcluded(identity.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *IdentityUpsert) ClearUpdatedAt() *IdentityUpsert {
	u.SetNull(identity.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *IdentityUpsert) SetUserID(v string) *IdentityUpsert {
	u.Set(identity.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IdentityUpsert) UpdateUserID() *IdentityUpsert {
	u.SetExcluded(identity.FieldUserID)
	return u
}

// SetUsername sets the "username" field.
func (u *IdentityUpsert) SetUsername(v string) *IdentityUpsert {
	u.Set(identity.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *IdentityUpsert) UpdateUsername() *IdentityUpsert {
	u.SetExcluded(identity.FieldUsername)
	return u
}

// ClearUsername clears the value of the "username" field.
func (u *IdentityUpsert) ClearUsername() *IdentityUpsert {
	u.SetNull(identity.FieldUsername)
	return u
}

// SetPassword sets the "password" field.
func (u *IdentityUpsert) SetPassword(v string) *IdentityUpsert {
	u.Set(identity.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *IdentityUpsert) UpdatePassword() *IdentityUpsert {
	u.SetExcluded(identity.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *IdentityUpsert) ClearPassword() *IdentityUpsert {
	u.SetNull(identity.FieldPassword)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Identity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IdentityUpsertOne) UpdateNewValues() *IdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(identity.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Identity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IdentityUpsertOne) Ignore() *IdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IdentityUpsertOne) DoNothing() *IdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IdentityCreate.OnConflict
// documentation for more info.
func (u *IdentityUpsertOne) Update(set func(*IdentityUpsert)) *IdentityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IdentityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IdentityUpsertOne) SetUpdatedAt(v time.Time) *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IdentityUpsertOne) UpdateUpdatedAt() *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *IdentityUpsertOne) ClearUpdatedAt() *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *IdentityUpsertOne) SetUserID(v string) *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IdentityUpsertOne) UpdateUserID() *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *IdentityUpsertOne) SetUsername(v string) *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *IdentityUpsertOne) UpdateUsername() *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *IdentityUpsertOne) ClearUsername() *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.ClearUsername()
	})
}

// SetPassword sets the "password" field.
func (u *IdentityUpsertOne) SetPassword(v string) *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *IdentityUpsertOne) UpdatePassword() *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *IdentityUpsertOne) ClearPassword() *IdentityUpsertOne {
	return u.Update(func(s *IdentityUpsert) {
		s.ClearPassword()
	})
}

// Exec executes the query.
func (u *IdentityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IdentityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IdentityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IdentityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IdentityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IdentityCreateBulk is the builder for creating many Identity entities in bulk.
type IdentityCreateBulk struct {
	config
	err      error
	builders []*IdentityCreate
	conflict []sql.ConflictOption
}

// Save creates the Identity entities in the database.
func (icb *IdentityCreateBulk) Save(ctx context.Context) ([]*Identity, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Identity, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdentityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IdentityCreateBulk) SaveX(ctx context.Context) []*Identity {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IdentityCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IdentityCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Identity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IdentityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *IdentityCreateBulk) OnConflict(opts ...sql.ConflictOption) *IdentityUpsertBulk {
	icb.conflict = opts
	return &IdentityUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Identity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *IdentityCreateBulk) OnConflictColumns(columns ...string) *IdentityUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &IdentityUpsertBulk{
		create: icb,
	}
}

// IdentityUpsertBulk is the builder for "upsert"-ing
// a bulk of Identity nodes.
type IdentityUpsertBulk struct {
	create *IdentityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Identity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *IdentityUpsertBulk) UpdateNewValues() *IdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(identity.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Identity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IdentityUpsertBulk) Ignore() *IdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IdentityUpsertBulk) DoNothing() *IdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IdentityCreateBulk.OnConflict
// documentation for more info.
func (u *IdentityUpsertBulk) Update(set func(*IdentityUpsert)) *IdentityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IdentityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IdentityUpsertBulk) SetUpdatedAt(v time.Time) *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IdentityUpsertBulk) UpdateUpdatedAt() *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *IdentityUpsertBulk) ClearUpdatedAt() *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *IdentityUpsertBulk) SetUserID(v string) *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *IdentityUpsertBulk) UpdateUserID() *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.UpdateUserID()
	})
}

// SetUsername sets the "username" field.
func (u *IdentityUpsertBulk) SetUsername(v string) *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *IdentityUpsertBulk) UpdateUsername() *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *IdentityUpsertBulk) ClearUsername() *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.ClearUsername()
	})
}

// SetPassword sets the "password" field.
func (u *IdentityUpsertBulk) SetPassword(v string) *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *IdentityUpsertBulk) UpdatePassword() *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *IdentityUpsertBulk) ClearPassword() *IdentityUpsertBulk {
	return u.Update(func(s *IdentityUpsert) {
		s.ClearPassword()
	})
}

// Exec executes the query.
func (u *IdentityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IdentityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IdentityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IdentityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
