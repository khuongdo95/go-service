// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/khuongdo95/go-service/internal/generated/ent/identity"
	"github.com/khuongdo95/go-service/internal/generated/ent/ipaccesscontrol"
	"github.com/khuongdo95/go-service/internal/generated/ent/predicate"
	"github.com/khuongdo95/go-service/internal/generated/ent/user"
	"github.com/khuongdo95/go-service/internal/generated/ent/useripwhitelist"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeIPAccessControl = "IPAccessControl"
	TypeIdentity        = "Identity"
	TypeUser            = "User"
	TypeUserIpWhiteList = "UserIpWhiteList"
)

// IPAccessControlMutation represents an operation that mutates the IPAccessControl nodes in the graph.
type IPAccessControlMutation struct {
	config
	op               Op
	typ              string
	id               *int64
	created_at       *time.Time
	updated_at       *time.Time
	created_by       *string
	updated_by       *string
	ip_address       *string
	tcp_stage        *bool
	tcp_live         *bool
	rabbitmq_stage   *bool
	rabbitmq_live    *bool
	translations_rmq *bool
	translations_tcp *bool
	active           *bool
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*IPAccessControl, error)
	predicates       []predicate.IPAccessControl
}

var _ ent.Mutation = (*IPAccessControlMutation)(nil)

// ipaccesscontrolOption allows management of the mutation configuration using functional options.
type ipaccesscontrolOption func(*IPAccessControlMutation)

// newIPAccessControlMutation creates new mutation for the IPAccessControl entity.
func newIPAccessControlMutation(c config, op Op, opts ...ipaccesscontrolOption) *IPAccessControlMutation {
	m := &IPAccessControlMutation{
		config:        c,
		op:            op,
		typ:           TypeIPAccessControl,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPAccessControlID sets the ID field of the mutation.
func withIPAccessControlID(id int64) ipaccesscontrolOption {
	return func(m *IPAccessControlMutation) {
		var (
			err   error
			once  sync.Once
			value *IPAccessControl
		)
		m.oldValue = func(ctx context.Context) (*IPAccessControl, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IPAccessControl.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIPAccessControl sets the old IPAccessControl of the mutation.
func withIPAccessControl(node *IPAccessControl) ipaccesscontrolOption {
	return func(m *IPAccessControlMutation) {
		m.oldValue = func(context.Context) (*IPAccessControl, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPAccessControlMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPAccessControlMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IPAccessControl entities.
func (m *IPAccessControlMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IPAccessControlMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IPAccessControlMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IPAccessControl.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *IPAccessControlMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IPAccessControlMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IPAccessControlMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IPAccessControlMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IPAccessControlMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *IPAccessControlMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[ipaccesscontrol.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *IPAccessControlMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[ipaccesscontrol.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IPAccessControlMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, ipaccesscontrol.FieldUpdatedAt)
}

// SetCreatedBy sets the "created_by" field.
func (m *IPAccessControlMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *IPAccessControlMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *IPAccessControlMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *IPAccessControlMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *IPAccessControlMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldUpdatedBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *IPAccessControlMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[ipaccesscontrol.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *IPAccessControlMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[ipaccesscontrol.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *IPAccessControlMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, ipaccesscontrol.FieldUpdatedBy)
}

// SetIPAddress sets the "ip_address" field.
func (m *IPAccessControlMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *IPAccessControlMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *IPAccessControlMutation) ResetIPAddress() {
	m.ip_address = nil
}

// SetTCPStage sets the "tcp_stage" field.
func (m *IPAccessControlMutation) SetTCPStage(b bool) {
	m.tcp_stage = &b
}

// TCPStage returns the value of the "tcp_stage" field in the mutation.
func (m *IPAccessControlMutation) TCPStage() (r bool, exists bool) {
	v := m.tcp_stage
	if v == nil {
		return
	}
	return *v, true
}

// OldTCPStage returns the old "tcp_stage" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldTCPStage(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTCPStage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTCPStage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTCPStage: %w", err)
	}
	return oldValue.TCPStage, nil
}

// ResetTCPStage resets all changes to the "tcp_stage" field.
func (m *IPAccessControlMutation) ResetTCPStage() {
	m.tcp_stage = nil
}

// SetTCPLive sets the "tcp_live" field.
func (m *IPAccessControlMutation) SetTCPLive(b bool) {
	m.tcp_live = &b
}

// TCPLive returns the value of the "tcp_live" field in the mutation.
func (m *IPAccessControlMutation) TCPLive() (r bool, exists bool) {
	v := m.tcp_live
	if v == nil {
		return
	}
	return *v, true
}

// OldTCPLive returns the old "tcp_live" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldTCPLive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTCPLive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTCPLive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTCPLive: %w", err)
	}
	return oldValue.TCPLive, nil
}

// ResetTCPLive resets all changes to the "tcp_live" field.
func (m *IPAccessControlMutation) ResetTCPLive() {
	m.tcp_live = nil
}

// SetRabbitmqStage sets the "rabbitmq_stage" field.
func (m *IPAccessControlMutation) SetRabbitmqStage(b bool) {
	m.rabbitmq_stage = &b
}

// RabbitmqStage returns the value of the "rabbitmq_stage" field in the mutation.
func (m *IPAccessControlMutation) RabbitmqStage() (r bool, exists bool) {
	v := m.rabbitmq_stage
	if v == nil {
		return
	}
	return *v, true
}

// OldRabbitmqStage returns the old "rabbitmq_stage" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldRabbitmqStage(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRabbitmqStage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRabbitmqStage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRabbitmqStage: %w", err)
	}
	return oldValue.RabbitmqStage, nil
}

// ResetRabbitmqStage resets all changes to the "rabbitmq_stage" field.
func (m *IPAccessControlMutation) ResetRabbitmqStage() {
	m.rabbitmq_stage = nil
}

// SetRabbitmqLive sets the "rabbitmq_live" field.
func (m *IPAccessControlMutation) SetRabbitmqLive(b bool) {
	m.rabbitmq_live = &b
}

// RabbitmqLive returns the value of the "rabbitmq_live" field in the mutation.
func (m *IPAccessControlMutation) RabbitmqLive() (r bool, exists bool) {
	v := m.rabbitmq_live
	if v == nil {
		return
	}
	return *v, true
}

// OldRabbitmqLive returns the old "rabbitmq_live" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldRabbitmqLive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRabbitmqLive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRabbitmqLive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRabbitmqLive: %w", err)
	}
	return oldValue.RabbitmqLive, nil
}

// ResetRabbitmqLive resets all changes to the "rabbitmq_live" field.
func (m *IPAccessControlMutation) ResetRabbitmqLive() {
	m.rabbitmq_live = nil
}

// SetTranslationsRmq sets the "translations_rmq" field.
func (m *IPAccessControlMutation) SetTranslationsRmq(b bool) {
	m.translations_rmq = &b
}

// TranslationsRmq returns the value of the "translations_rmq" field in the mutation.
func (m *IPAccessControlMutation) TranslationsRmq() (r bool, exists bool) {
	v := m.translations_rmq
	if v == nil {
		return
	}
	return *v, true
}

// OldTranslationsRmq returns the old "translations_rmq" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldTranslationsRmq(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranslationsRmq is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranslationsRmq requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranslationsRmq: %w", err)
	}
	return oldValue.TranslationsRmq, nil
}

// ResetTranslationsRmq resets all changes to the "translations_rmq" field.
func (m *IPAccessControlMutation) ResetTranslationsRmq() {
	m.translations_rmq = nil
}

// SetTranslationsTCP sets the "translations_tcp" field.
func (m *IPAccessControlMutation) SetTranslationsTCP(b bool) {
	m.translations_tcp = &b
}

// TranslationsTCP returns the value of the "translations_tcp" field in the mutation.
func (m *IPAccessControlMutation) TranslationsTCP() (r bool, exists bool) {
	v := m.translations_tcp
	if v == nil {
		return
	}
	return *v, true
}

// OldTranslationsTCP returns the old "translations_tcp" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldTranslationsTCP(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTranslationsTCP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTranslationsTCP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTranslationsTCP: %w", err)
	}
	return oldValue.TranslationsTCP, nil
}

// ResetTranslationsTCP resets all changes to the "translations_tcp" field.
func (m *IPAccessControlMutation) ResetTranslationsTCP() {
	m.translations_tcp = nil
}

// SetActive sets the "active" field.
func (m *IPAccessControlMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *IPAccessControlMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the IPAccessControl entity.
// If the IPAccessControl object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPAccessControlMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *IPAccessControlMutation) ResetActive() {
	m.active = nil
}

// Where appends a list predicates to the IPAccessControlMutation builder.
func (m *IPAccessControlMutation) Where(ps ...predicate.IPAccessControl) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IPAccessControlMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IPAccessControlMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IPAccessControl, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IPAccessControlMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IPAccessControlMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IPAccessControl).
func (m *IPAccessControlMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IPAccessControlMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, ipaccesscontrol.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ipaccesscontrol.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, ipaccesscontrol.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, ipaccesscontrol.FieldUpdatedBy)
	}
	if m.ip_address != nil {
		fields = append(fields, ipaccesscontrol.FieldIPAddress)
	}
	if m.tcp_stage != nil {
		fields = append(fields, ipaccesscontrol.FieldTCPStage)
	}
	if m.tcp_live != nil {
		fields = append(fields, ipaccesscontrol.FieldTCPLive)
	}
	if m.rabbitmq_stage != nil {
		fields = append(fields, ipaccesscontrol.FieldRabbitmqStage)
	}
	if m.rabbitmq_live != nil {
		fields = append(fields, ipaccesscontrol.FieldRabbitmqLive)
	}
	if m.translations_rmq != nil {
		fields = append(fields, ipaccesscontrol.FieldTranslationsRmq)
	}
	if m.translations_tcp != nil {
		fields = append(fields, ipaccesscontrol.FieldTranslationsTCP)
	}
	if m.active != nil {
		fields = append(fields, ipaccesscontrol.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IPAccessControlMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ipaccesscontrol.FieldCreatedAt:
		return m.CreatedAt()
	case ipaccesscontrol.FieldUpdatedAt:
		return m.UpdatedAt()
	case ipaccesscontrol.FieldCreatedBy:
		return m.CreatedBy()
	case ipaccesscontrol.FieldUpdatedBy:
		return m.UpdatedBy()
	case ipaccesscontrol.FieldIPAddress:
		return m.IPAddress()
	case ipaccesscontrol.FieldTCPStage:
		return m.TCPStage()
	case ipaccesscontrol.FieldTCPLive:
		return m.TCPLive()
	case ipaccesscontrol.FieldRabbitmqStage:
		return m.RabbitmqStage()
	case ipaccesscontrol.FieldRabbitmqLive:
		return m.RabbitmqLive()
	case ipaccesscontrol.FieldTranslationsRmq:
		return m.TranslationsRmq()
	case ipaccesscontrol.FieldTranslationsTCP:
		return m.TranslationsTCP()
	case ipaccesscontrol.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IPAccessControlMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ipaccesscontrol.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ipaccesscontrol.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ipaccesscontrol.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case ipaccesscontrol.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case ipaccesscontrol.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case ipaccesscontrol.FieldTCPStage:
		return m.OldTCPStage(ctx)
	case ipaccesscontrol.FieldTCPLive:
		return m.OldTCPLive(ctx)
	case ipaccesscontrol.FieldRabbitmqStage:
		return m.OldRabbitmqStage(ctx)
	case ipaccesscontrol.FieldRabbitmqLive:
		return m.OldRabbitmqLive(ctx)
	case ipaccesscontrol.FieldTranslationsRmq:
		return m.OldTranslationsRmq(ctx)
	case ipaccesscontrol.FieldTranslationsTCP:
		return m.OldTranslationsTCP(ctx)
	case ipaccesscontrol.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown IPAccessControl field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPAccessControlMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ipaccesscontrol.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ipaccesscontrol.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ipaccesscontrol.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case ipaccesscontrol.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case ipaccesscontrol.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case ipaccesscontrol.FieldTCPStage:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTCPStage(v)
		return nil
	case ipaccesscontrol.FieldTCPLive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTCPLive(v)
		return nil
	case ipaccesscontrol.FieldRabbitmqStage:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRabbitmqStage(v)
		return nil
	case ipaccesscontrol.FieldRabbitmqLive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRabbitmqLive(v)
		return nil
	case ipaccesscontrol.FieldTranslationsRmq:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranslationsRmq(v)
		return nil
	case ipaccesscontrol.FieldTranslationsTCP:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTranslationsTCP(v)
		return nil
	case ipaccesscontrol.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown IPAccessControl field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IPAccessControlMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IPAccessControlMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPAccessControlMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IPAccessControl numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IPAccessControlMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ipaccesscontrol.FieldUpdatedAt) {
		fields = append(fields, ipaccesscontrol.FieldUpdatedAt)
	}
	if m.FieldCleared(ipaccesscontrol.FieldUpdatedBy) {
		fields = append(fields, ipaccesscontrol.FieldUpdatedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IPAccessControlMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPAccessControlMutation) ClearField(name string) error {
	switch name {
	case ipaccesscontrol.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case ipaccesscontrol.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	}
	return fmt.Errorf("unknown IPAccessControl nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IPAccessControlMutation) ResetField(name string) error {
	switch name {
	case ipaccesscontrol.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ipaccesscontrol.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ipaccesscontrol.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case ipaccesscontrol.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case ipaccesscontrol.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case ipaccesscontrol.FieldTCPStage:
		m.ResetTCPStage()
		return nil
	case ipaccesscontrol.FieldTCPLive:
		m.ResetTCPLive()
		return nil
	case ipaccesscontrol.FieldRabbitmqStage:
		m.ResetRabbitmqStage()
		return nil
	case ipaccesscontrol.FieldRabbitmqLive:
		m.ResetRabbitmqLive()
		return nil
	case ipaccesscontrol.FieldTranslationsRmq:
		m.ResetTranslationsRmq()
		return nil
	case ipaccesscontrol.FieldTranslationsTCP:
		m.ResetTranslationsTCP()
		return nil
	case ipaccesscontrol.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown IPAccessControl field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IPAccessControlMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IPAccessControlMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IPAccessControlMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IPAccessControlMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IPAccessControlMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IPAccessControlMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IPAccessControlMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown IPAccessControl unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IPAccessControlMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown IPAccessControl edge %s", name)
}

// IdentityMutation represents an operation that mutates the Identity nodes in the graph.
type IdentityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	username      *string
	password      *string
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Identity, error)
	predicates    []predicate.Identity
}

var _ ent.Mutation = (*IdentityMutation)(nil)

// identityOption allows management of the mutation configuration using functional options.
type identityOption func(*IdentityMutation)

// newIdentityMutation creates new mutation for the Identity entity.
func newIdentityMutation(c config, op Op, opts ...identityOption) *IdentityMutation {
	m := &IdentityMutation{
		config:        c,
		op:            op,
		typ:           TypeIdentity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIdentityID sets the ID field of the mutation.
func withIdentityID(id int) identityOption {
	return func(m *IdentityMutation) {
		var (
			err   error
			once  sync.Once
			value *Identity
		)
		m.oldValue = func(ctx context.Context) (*Identity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Identity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIdentity sets the old Identity of the mutation.
func withIdentity(node *Identity) identityOption {
	return func(m *IdentityMutation) {
		m.oldValue = func(context.Context) (*Identity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IdentityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IdentityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IdentityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IdentityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Identity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *IdentityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IdentityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IdentityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IdentityMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IdentityMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *IdentityMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[identity.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *IdentityMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[identity.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IdentityMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, identity.FieldUpdatedAt)
}

// SetUserID sets the "user_id" field.
func (m *IdentityMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *IdentityMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *IdentityMutation) ResetUserID() {
	m.user = nil
}

// SetUsername sets the "username" field.
func (m *IdentityMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *IdentityMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *IdentityMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[identity.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *IdentityMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[identity.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *IdentityMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, identity.FieldUsername)
}

// SetPassword sets the "password" field.
func (m *IdentityMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *IdentityMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Identity entity.
// If the Identity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentityMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *IdentityMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[identity.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *IdentityMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[identity.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *IdentityMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, identity.FieldPassword)
}

// ClearUser clears the "user" edge to the User entity.
func (m *IdentityMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[identity.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *IdentityMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *IdentityMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *IdentityMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the IdentityMutation builder.
func (m *IdentityMutation) Where(ps ...predicate.Identity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IdentityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IdentityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Identity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IdentityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IdentityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Identity).
func (m *IdentityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IdentityMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, identity.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, identity.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, identity.FieldUserID)
	}
	if m.username != nil {
		fields = append(fields, identity.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, identity.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IdentityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case identity.FieldCreatedAt:
		return m.CreatedAt()
	case identity.FieldUpdatedAt:
		return m.UpdatedAt()
	case identity.FieldUserID:
		return m.UserID()
	case identity.FieldUsername:
		return m.Username()
	case identity.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IdentityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case identity.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case identity.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case identity.FieldUserID:
		return m.OldUserID(ctx)
	case identity.FieldUsername:
		return m.OldUsername(ctx)
	case identity.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown Identity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case identity.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case identity.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case identity.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case identity.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case identity.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown Identity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IdentityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IdentityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Identity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IdentityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(identity.FieldUpdatedAt) {
		fields = append(fields, identity.FieldUpdatedAt)
	}
	if m.FieldCleared(identity.FieldUsername) {
		fields = append(fields, identity.FieldUsername)
	}
	if m.FieldCleared(identity.FieldPassword) {
		fields = append(fields, identity.FieldPassword)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IdentityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IdentityMutation) ClearField(name string) error {
	switch name {
	case identity.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case identity.FieldUsername:
		m.ClearUsername()
		return nil
	case identity.FieldPassword:
		m.ClearPassword()
		return nil
	}
	return fmt.Errorf("unknown Identity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IdentityMutation) ResetField(name string) error {
	switch name {
	case identity.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case identity.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case identity.FieldUserID:
		m.ResetUserID()
		return nil
	case identity.FieldUsername:
		m.ResetUsername()
		return nil
	case identity.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown Identity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IdentityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, identity.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IdentityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case identity.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IdentityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IdentityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IdentityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, identity.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IdentityMutation) EdgeCleared(name string) bool {
	switch name {
	case identity.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IdentityMutation) ClearEdge(name string) error {
	switch name {
	case identity.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Identity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IdentityMutation) ResetEdge(name string) error {
	switch name {
	case identity.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Identity edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	created_at           *time.Time
	updated_at           *time.Time
	deleted_at           *time.Time
	deleted_by           *string
	created_by           *string
	updated_by           *string
	name                 *string
	email                *string
	tenant_id            *string
	clearedFields        map[string]struct{}
	identity             map[int]struct{}
	removedidentity      map[int]struct{}
	clearedidentity      bool
	ip_white_list        map[int]struct{}
	removedip_white_list map[int]struct{}
	clearedip_white_list bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[user.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, user.FieldUpdatedAt)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *UserMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *UserMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *UserMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[user.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *UserMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *UserMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, user.FieldDeletedBy)
}

// SetCreatedBy sets the "created_by" field.
func (m *UserMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserMutation) ResetCreatedBy() {
	m.created_by = nil
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedBy(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[user.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, user.FieldUpdatedBy)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *UserMutation) ClearName() {
	m.name = nil
	m.clearedFields[user.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *UserMutation) NameCleared() bool {
	_, ok := m.clearedFields[user.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, user.FieldName)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetTenantID sets the "tenant_id" field.
func (m *UserMutation) SetTenantID(s string) {
	m.tenant_id = &s
}

// TenantID returns the value of the "tenant_id" field in the mutation.
func (m *UserMutation) TenantID() (r string, exists bool) {
	v := m.tenant_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTenantID returns the old "tenant_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTenantID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenantID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenantID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenantID: %w", err)
	}
	return oldValue.TenantID, nil
}

// ResetTenantID resets all changes to the "tenant_id" field.
func (m *UserMutation) ResetTenantID() {
	m.tenant_id = nil
}

// AddIdentityIDs adds the "identity" edge to the Identity entity by ids.
func (m *UserMutation) AddIdentityIDs(ids ...int) {
	if m.identity == nil {
		m.identity = make(map[int]struct{})
	}
	for i := range ids {
		m.identity[ids[i]] = struct{}{}
	}
}

// ClearIdentity clears the "identity" edge to the Identity entity.
func (m *UserMutation) ClearIdentity() {
	m.clearedidentity = true
}

// IdentityCleared reports if the "identity" edge to the Identity entity was cleared.
func (m *UserMutation) IdentityCleared() bool {
	return m.clearedidentity
}

// RemoveIdentityIDs removes the "identity" edge to the Identity entity by IDs.
func (m *UserMutation) RemoveIdentityIDs(ids ...int) {
	if m.removedidentity == nil {
		m.removedidentity = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.identity, ids[i])
		m.removedidentity[ids[i]] = struct{}{}
	}
}

// RemovedIdentity returns the removed IDs of the "identity" edge to the Identity entity.
func (m *UserMutation) RemovedIdentityIDs() (ids []int) {
	for id := range m.removedidentity {
		ids = append(ids, id)
	}
	return
}

// IdentityIDs returns the "identity" edge IDs in the mutation.
func (m *UserMutation) IdentityIDs() (ids []int) {
	for id := range m.identity {
		ids = append(ids, id)
	}
	return
}

// ResetIdentity resets all changes to the "identity" edge.
func (m *UserMutation) ResetIdentity() {
	m.identity = nil
	m.clearedidentity = false
	m.removedidentity = nil
}

// AddIPWhiteListIDs adds the "ip_white_list" edge to the UserIpWhiteList entity by ids.
func (m *UserMutation) AddIPWhiteListIDs(ids ...int) {
	if m.ip_white_list == nil {
		m.ip_white_list = make(map[int]struct{})
	}
	for i := range ids {
		m.ip_white_list[ids[i]] = struct{}{}
	}
}

// ClearIPWhiteList clears the "ip_white_list" edge to the UserIpWhiteList entity.
func (m *UserMutation) ClearIPWhiteList() {
	m.clearedip_white_list = true
}

// IPWhiteListCleared reports if the "ip_white_list" edge to the UserIpWhiteList entity was cleared.
func (m *UserMutation) IPWhiteListCleared() bool {
	return m.clearedip_white_list
}

// RemoveIPWhiteListIDs removes the "ip_white_list" edge to the UserIpWhiteList entity by IDs.
func (m *UserMutation) RemoveIPWhiteListIDs(ids ...int) {
	if m.removedip_white_list == nil {
		m.removedip_white_list = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ip_white_list, ids[i])
		m.removedip_white_list[ids[i]] = struct{}{}
	}
}

// RemovedIPWhiteList returns the removed IDs of the "ip_white_list" edge to the UserIpWhiteList entity.
func (m *UserMutation) RemovedIPWhiteListIDs() (ids []int) {
	for id := range m.removedip_white_list {
		ids = append(ids, id)
	}
	return
}

// IPWhiteListIDs returns the "ip_white_list" edge IDs in the mutation.
func (m *UserMutation) IPWhiteListIDs() (ids []int) {
	for id := range m.ip_white_list {
		ids = append(ids, id)
	}
	return
}

// ResetIPWhiteList resets all changes to the "ip_white_list" edge.
func (m *UserMutation) ResetIPWhiteList() {
	m.ip_white_list = nil
	m.clearedip_white_list = false
	m.removedip_white_list = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, user.FieldDeletedBy)
	}
	if m.created_by != nil {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.tenant_id != nil {
		fields = append(fields, user.FieldTenantID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldDeletedBy:
		return m.DeletedBy()
	case user.FieldCreatedBy:
		return m.CreatedBy()
	case user.FieldUpdatedBy:
		return m.UpdatedBy()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldTenantID:
		return m.TenantID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case user.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case user.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldTenantID:
		return m.OldTenantID(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case user.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case user.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldTenantID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenantID(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUpdatedAt) {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.FieldCleared(user.FieldDeletedBy) {
		fields = append(fields, user.FieldDeletedBy)
	}
	if m.FieldCleared(user.FieldUpdatedBy) {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.FieldCleared(user.FieldName) {
		fields = append(fields, user.FieldName)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case user.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case user.FieldName:
		m.ClearName()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case user.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldTenantID:
		m.ResetTenantID()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.identity != nil {
		edges = append(edges, user.EdgeIdentity)
	}
	if m.ip_white_list != nil {
		edges = append(edges, user.EdgeIPWhiteList)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeIdentity:
		ids := make([]ent.Value, 0, len(m.identity))
		for id := range m.identity {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeIPWhiteList:
		ids := make([]ent.Value, 0, len(m.ip_white_list))
		for id := range m.ip_white_list {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedidentity != nil {
		edges = append(edges, user.EdgeIdentity)
	}
	if m.removedip_white_list != nil {
		edges = append(edges, user.EdgeIPWhiteList)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeIdentity:
		ids := make([]ent.Value, 0, len(m.removedidentity))
		for id := range m.removedidentity {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeIPWhiteList:
		ids := make([]ent.Value, 0, len(m.removedip_white_list))
		for id := range m.removedip_white_list {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedidentity {
		edges = append(edges, user.EdgeIdentity)
	}
	if m.clearedip_white_list {
		edges = append(edges, user.EdgeIPWhiteList)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeIdentity:
		return m.clearedidentity
	case user.EdgeIPWhiteList:
		return m.clearedip_white_list
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeIdentity:
		m.ResetIdentity()
		return nil
	case user.EdgeIPWhiteList:
		m.ResetIPWhiteList()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserIpWhiteListMutation represents an operation that mutates the UserIpWhiteList nodes in the graph.
type UserIpWhiteListMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	ip_address    *string
	clearedFields map[string]struct{}
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*UserIpWhiteList, error)
	predicates    []predicate.UserIpWhiteList
}

var _ ent.Mutation = (*UserIpWhiteListMutation)(nil)

// useripwhitelistOption allows management of the mutation configuration using functional options.
type useripwhitelistOption func(*UserIpWhiteListMutation)

// newUserIpWhiteListMutation creates new mutation for the UserIpWhiteList entity.
func newUserIpWhiteListMutation(c config, op Op, opts ...useripwhitelistOption) *UserIpWhiteListMutation {
	m := &UserIpWhiteListMutation{
		config:        c,
		op:            op,
		typ:           TypeUserIpWhiteList,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserIpWhiteListID sets the ID field of the mutation.
func withUserIpWhiteListID(id int) useripwhitelistOption {
	return func(m *UserIpWhiteListMutation) {
		var (
			err   error
			once  sync.Once
			value *UserIpWhiteList
		)
		m.oldValue = func(ctx context.Context) (*UserIpWhiteList, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserIpWhiteList.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserIpWhiteList sets the old UserIpWhiteList of the mutation.
func withUserIpWhiteList(node *UserIpWhiteList) useripwhitelistOption {
	return func(m *UserIpWhiteListMutation) {
		m.oldValue = func(context.Context) (*UserIpWhiteList, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserIpWhiteListMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserIpWhiteListMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserIpWhiteListMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserIpWhiteListMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserIpWhiteList.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserIpWhiteListMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserIpWhiteListMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserIpWhiteList entity.
// If the UserIpWhiteList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIpWhiteListMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserIpWhiteListMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserIpWhiteListMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserIpWhiteListMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserIpWhiteList entity.
// If the UserIpWhiteList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIpWhiteListMutation) OldUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (m *UserIpWhiteListMutation) ClearUpdatedAt() {
	m.updated_at = nil
	m.clearedFields[useripwhitelist.FieldUpdatedAt] = struct{}{}
}

// UpdatedAtCleared returns if the "updated_at" field was cleared in this mutation.
func (m *UserIpWhiteListMutation) UpdatedAtCleared() bool {
	_, ok := m.clearedFields[useripwhitelist.FieldUpdatedAt]
	return ok
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserIpWhiteListMutation) ResetUpdatedAt() {
	m.updated_at = nil
	delete(m.clearedFields, useripwhitelist.FieldUpdatedAt)
}

// SetUserID sets the "user_id" field.
func (m *UserIpWhiteListMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserIpWhiteListMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserIpWhiteList entity.
// If the UserIpWhiteList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIpWhiteListMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserIpWhiteListMutation) ResetUserID() {
	m.user = nil
}

// SetIPAddress sets the "ip_address" field.
func (m *UserIpWhiteListMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *UserIpWhiteListMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the UserIpWhiteList entity.
// If the UserIpWhiteList object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserIpWhiteListMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *UserIpWhiteListMutation) ResetIPAddress() {
	m.ip_address = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserIpWhiteListMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[useripwhitelist.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserIpWhiteListMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserIpWhiteListMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserIpWhiteListMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserIpWhiteListMutation builder.
func (m *UserIpWhiteListMutation) Where(ps ...predicate.UserIpWhiteList) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserIpWhiteListMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserIpWhiteListMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserIpWhiteList, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserIpWhiteListMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserIpWhiteListMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserIpWhiteList).
func (m *UserIpWhiteListMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserIpWhiteListMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, useripwhitelist.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, useripwhitelist.FieldUpdatedAt)
	}
	if m.user != nil {
		fields = append(fields, useripwhitelist.FieldUserID)
	}
	if m.ip_address != nil {
		fields = append(fields, useripwhitelist.FieldIPAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserIpWhiteListMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useripwhitelist.FieldCreatedAt:
		return m.CreatedAt()
	case useripwhitelist.FieldUpdatedAt:
		return m.UpdatedAt()
	case useripwhitelist.FieldUserID:
		return m.UserID()
	case useripwhitelist.FieldIPAddress:
		return m.IPAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserIpWhiteListMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useripwhitelist.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case useripwhitelist.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case useripwhitelist.FieldUserID:
		return m.OldUserID(ctx)
	case useripwhitelist.FieldIPAddress:
		return m.OldIPAddress(ctx)
	}
	return nil, fmt.Errorf("unknown UserIpWhiteList field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserIpWhiteListMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useripwhitelist.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case useripwhitelist.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case useripwhitelist.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case useripwhitelist.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	}
	return fmt.Errorf("unknown UserIpWhiteList field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserIpWhiteListMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserIpWhiteListMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserIpWhiteListMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserIpWhiteList numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserIpWhiteListMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(useripwhitelist.FieldUpdatedAt) {
		fields = append(fields, useripwhitelist.FieldUpdatedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserIpWhiteListMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserIpWhiteListMutation) ClearField(name string) error {
	switch name {
	case useripwhitelist.FieldUpdatedAt:
		m.ClearUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserIpWhiteList nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserIpWhiteListMutation) ResetField(name string) error {
	switch name {
	case useripwhitelist.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case useripwhitelist.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case useripwhitelist.FieldUserID:
		m.ResetUserID()
		return nil
	case useripwhitelist.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	}
	return fmt.Errorf("unknown UserIpWhiteList field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserIpWhiteListMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, useripwhitelist.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserIpWhiteListMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case useripwhitelist.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserIpWhiteListMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserIpWhiteListMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserIpWhiteListMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, useripwhitelist.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserIpWhiteListMutation) EdgeCleared(name string) bool {
	switch name {
	case useripwhitelist.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserIpWhiteListMutation) ClearEdge(name string) error {
	switch name {
	case useripwhitelist.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserIpWhiteList unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserIpWhiteListMutation) ResetEdge(name string) error {
	switch name {
	case useripwhitelist.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserIpWhiteList edge %s", name)
}
