// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khuongdo95/go-service/internal/generated/ent/user"
	"github.com/khuongdo95/go-service/internal/generated/ent/useripwhitelist"
)

// UserIpWhiteListCreate is the builder for creating a UserIpWhiteList entity.
type UserIpWhiteListCreate struct {
	config
	mutation *UserIpWhiteListMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uiwlc *UserIpWhiteListCreate) SetCreatedAt(t time.Time) *UserIpWhiteListCreate {
	uiwlc.mutation.SetCreatedAt(t)
	return uiwlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uiwlc *UserIpWhiteListCreate) SetNillableCreatedAt(t *time.Time) *UserIpWhiteListCreate {
	if t != nil {
		uiwlc.SetCreatedAt(*t)
	}
	return uiwlc
}

// SetUpdatedAt sets the "updated_at" field.
func (uiwlc *UserIpWhiteListCreate) SetUpdatedAt(t time.Time) *UserIpWhiteListCreate {
	uiwlc.mutation.SetUpdatedAt(t)
	return uiwlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uiwlc *UserIpWhiteListCreate) SetNillableUpdatedAt(t *time.Time) *UserIpWhiteListCreate {
	if t != nil {
		uiwlc.SetUpdatedAt(*t)
	}
	return uiwlc
}

// SetUserID sets the "user_id" field.
func (uiwlc *UserIpWhiteListCreate) SetUserID(s string) *UserIpWhiteListCreate {
	uiwlc.mutation.SetUserID(s)
	return uiwlc
}

// SetIPAddress sets the "ip_address" field.
func (uiwlc *UserIpWhiteListCreate) SetIPAddress(s string) *UserIpWhiteListCreate {
	uiwlc.mutation.SetIPAddress(s)
	return uiwlc
}

// SetUser sets the "user" edge to the User entity.
func (uiwlc *UserIpWhiteListCreate) SetUser(u *User) *UserIpWhiteListCreate {
	return uiwlc.SetUserID(u.ID)
}

// Mutation returns the UserIpWhiteListMutation object of the builder.
func (uiwlc *UserIpWhiteListCreate) Mutation() *UserIpWhiteListMutation {
	return uiwlc.mutation
}

// Save creates the UserIpWhiteList in the database.
func (uiwlc *UserIpWhiteListCreate) Save(ctx context.Context) (*UserIpWhiteList, error) {
	uiwlc.defaults()
	return withHooks(ctx, uiwlc.sqlSave, uiwlc.mutation, uiwlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uiwlc *UserIpWhiteListCreate) SaveX(ctx context.Context) *UserIpWhiteList {
	v, err := uiwlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uiwlc *UserIpWhiteListCreate) Exec(ctx context.Context) error {
	_, err := uiwlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiwlc *UserIpWhiteListCreate) ExecX(ctx context.Context) {
	if err := uiwlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uiwlc *UserIpWhiteListCreate) defaults() {
	if _, ok := uiwlc.mutation.CreatedAt(); !ok {
		v := useripwhitelist.DefaultCreatedAt()
		uiwlc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiwlc *UserIpWhiteListCreate) check() error {
	if _, ok := uiwlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserIpWhiteList.created_at"`)}
	}
	if _, ok := uiwlc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserIpWhiteList.user_id"`)}
	}
	if _, ok := uiwlc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "UserIpWhiteList.ip_address"`)}
	}
	if len(uiwlc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserIpWhiteList.user"`)}
	}
	return nil
}

func (uiwlc *UserIpWhiteListCreate) sqlSave(ctx context.Context) (*UserIpWhiteList, error) {
	if err := uiwlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uiwlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uiwlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uiwlc.mutation.id = &_node.ID
	uiwlc.mutation.done = true
	return _node, nil
}

func (uiwlc *UserIpWhiteListCreate) createSpec() (*UserIpWhiteList, *sqlgraph.CreateSpec) {
	var (
		_node = &UserIpWhiteList{config: uiwlc.config}
		_spec = sqlgraph.NewCreateSpec(useripwhitelist.Table, sqlgraph.NewFieldSpec(useripwhitelist.FieldID, field.TypeInt))
	)
	_spec.OnConflict = uiwlc.conflict
	if value, ok := uiwlc.mutation.CreatedAt(); ok {
		_spec.SetField(useripwhitelist.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uiwlc.mutation.UpdatedAt(); ok {
		_spec.SetField(useripwhitelist.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := uiwlc.mutation.IPAddress(); ok {
		_spec.SetField(useripwhitelist.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if nodes := uiwlc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   useripwhitelist.UserTable,
			Columns: []string{useripwhitelist.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserIpWhiteList.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserIpWhiteListUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uiwlc *UserIpWhiteListCreate) OnConflict(opts ...sql.ConflictOption) *UserIpWhiteListUpsertOne {
	uiwlc.conflict = opts
	return &UserIpWhiteListUpsertOne{
		create: uiwlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserIpWhiteList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uiwlc *UserIpWhiteListCreate) OnConflictColumns(columns ...string) *UserIpWhiteListUpsertOne {
	uiwlc.conflict = append(uiwlc.conflict, sql.ConflictColumns(columns...))
	return &UserIpWhiteListUpsertOne{
		create: uiwlc,
	}
}

type (
	// UserIpWhiteListUpsertOne is the builder for "upsert"-ing
	//  one UserIpWhiteList node.
	UserIpWhiteListUpsertOne struct {
		create *UserIpWhiteListCreate
	}

	// UserIpWhiteListUpsert is the "OnConflict" setter.
	UserIpWhiteListUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *UserIpWhiteListUpsert) SetUpdatedAt(v time.Time) *UserIpWhiteListUpsert {
	u.Set(useripwhitelist.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserIpWhiteListUpsert) UpdateUpdatedAt() *UserIpWhiteListUpsert {
	u.SetExcluded(useripwhitelist.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserIpWhiteListUpsert) ClearUpdatedAt() *UserIpWhiteListUpsert {
	u.SetNull(useripwhitelist.FieldUpdatedAt)
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserIpWhiteListUpsert) SetUserID(v string) *UserIpWhiteListUpsert {
	u.Set(useripwhitelist.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserIpWhiteListUpsert) UpdateUserID() *UserIpWhiteListUpsert {
	u.SetExcluded(useripwhitelist.FieldUserID)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *UserIpWhiteListUpsert) SetIPAddress(v string) *UserIpWhiteListUpsert {
	u.Set(useripwhitelist.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *UserIpWhiteListUpsert) UpdateIPAddress() *UserIpWhiteListUpsert {
	u.SetExcluded(useripwhitelist.FieldIPAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.UserIpWhiteList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserIpWhiteListUpsertOne) UpdateNewValues() *UserIpWhiteListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(useripwhitelist.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserIpWhiteList.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserIpWhiteListUpsertOne) Ignore() *UserIpWhiteListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserIpWhiteListUpsertOne) DoNothing() *UserIpWhiteListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserIpWhiteListCreate.OnConflict
// documentation for more info.
func (u *UserIpWhiteListUpsertOne) Update(set func(*UserIpWhiteListUpsert)) *UserIpWhiteListUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserIpWhiteListUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserIpWhiteListUpsertOne) SetUpdatedAt(v time.Time) *UserIpWhiteListUpsertOne {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserIpWhiteListUpsertOne) UpdateUpdatedAt() *UserIpWhiteListUpsertOne {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserIpWhiteListUpsertOne) ClearUpdatedAt() *UserIpWhiteListUpsertOne {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserIpWhiteListUpsertOne) SetUserID(v string) *UserIpWhiteListUpsertOne {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserIpWhiteListUpsertOne) UpdateUserID() *UserIpWhiteListUpsertOne {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.UpdateUserID()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *UserIpWhiteListUpsertOne) SetIPAddress(v string) *UserIpWhiteListUpsertOne {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *UserIpWhiteListUpsertOne) UpdateIPAddress() *UserIpWhiteListUpsertOne {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.UpdateIPAddress()
	})
}

// Exec executes the query.
func (u *UserIpWhiteListUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserIpWhiteListCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserIpWhiteListUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserIpWhiteListUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserIpWhiteListUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserIpWhiteListCreateBulk is the builder for creating many UserIpWhiteList entities in bulk.
type UserIpWhiteListCreateBulk struct {
	config
	err      error
	builders []*UserIpWhiteListCreate
	conflict []sql.ConflictOption
}

// Save creates the UserIpWhiteList entities in the database.
func (uiwlcb *UserIpWhiteListCreateBulk) Save(ctx context.Context) ([]*UserIpWhiteList, error) {
	if uiwlcb.err != nil {
		return nil, uiwlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uiwlcb.builders))
	nodes := make([]*UserIpWhiteList, len(uiwlcb.builders))
	mutators := make([]Mutator, len(uiwlcb.builders))
	for i := range uiwlcb.builders {
		func(i int, root context.Context) {
			builder := uiwlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserIpWhiteListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uiwlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uiwlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uiwlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uiwlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uiwlcb *UserIpWhiteListCreateBulk) SaveX(ctx context.Context) []*UserIpWhiteList {
	v, err := uiwlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uiwlcb *UserIpWhiteListCreateBulk) Exec(ctx context.Context) error {
	_, err := uiwlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiwlcb *UserIpWhiteListCreateBulk) ExecX(ctx context.Context) {
	if err := uiwlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserIpWhiteList.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserIpWhiteListUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (uiwlcb *UserIpWhiteListCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserIpWhiteListUpsertBulk {
	uiwlcb.conflict = opts
	return &UserIpWhiteListUpsertBulk{
		create: uiwlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserIpWhiteList.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uiwlcb *UserIpWhiteListCreateBulk) OnConflictColumns(columns ...string) *UserIpWhiteListUpsertBulk {
	uiwlcb.conflict = append(uiwlcb.conflict, sql.ConflictColumns(columns...))
	return &UserIpWhiteListUpsertBulk{
		create: uiwlcb,
	}
}

// UserIpWhiteListUpsertBulk is the builder for "upsert"-ing
// a bulk of UserIpWhiteList nodes.
type UserIpWhiteListUpsertBulk struct {
	create *UserIpWhiteListCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserIpWhiteList.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *UserIpWhiteListUpsertBulk) UpdateNewValues() *UserIpWhiteListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(useripwhitelist.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserIpWhiteList.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserIpWhiteListUpsertBulk) Ignore() *UserIpWhiteListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserIpWhiteListUpsertBulk) DoNothing() *UserIpWhiteListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserIpWhiteListCreateBulk.OnConflict
// documentation for more info.
func (u *UserIpWhiteListUpsertBulk) Update(set func(*UserIpWhiteListUpsert)) *UserIpWhiteListUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserIpWhiteListUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserIpWhiteListUpsertBulk) SetUpdatedAt(v time.Time) *UserIpWhiteListUpsertBulk {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserIpWhiteListUpsertBulk) UpdateUpdatedAt() *UserIpWhiteListUpsertBulk {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *UserIpWhiteListUpsertBulk) ClearUpdatedAt() *UserIpWhiteListUpsertBulk {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUserID sets the "user_id" field.
func (u *UserIpWhiteListUpsertBulk) SetUserID(v string) *UserIpWhiteListUpsertBulk {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserIpWhiteListUpsertBulk) UpdateUserID() *UserIpWhiteListUpsertBulk {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.UpdateUserID()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *UserIpWhiteListUpsertBulk) SetIPAddress(v string) *UserIpWhiteListUpsertBulk {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *UserIpWhiteListUpsertBulk) UpdateIPAddress() *UserIpWhiteListUpsertBulk {
	return u.Update(func(s *UserIpWhiteListUpsert) {
		s.UpdateIPAddress()
	})
}

// Exec executes the query.
func (u *UserIpWhiteListUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserIpWhiteListCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserIpWhiteListCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserIpWhiteListUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
