// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khuongdo95/go-service/internal/generated/ent/ipaccesscontrol"
)

// IPAccessControlCreate is the builder for creating a IPAccessControl entity.
type IPAccessControlCreate struct {
	config
	mutation *IPAccessControlMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (iacc *IPAccessControlCreate) SetCreatedAt(t time.Time) *IPAccessControlCreate {
	iacc.mutation.SetCreatedAt(t)
	return iacc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableCreatedAt(t *time.Time) *IPAccessControlCreate {
	if t != nil {
		iacc.SetCreatedAt(*t)
	}
	return iacc
}

// SetUpdatedAt sets the "updated_at" field.
func (iacc *IPAccessControlCreate) SetUpdatedAt(t time.Time) *IPAccessControlCreate {
	iacc.mutation.SetUpdatedAt(t)
	return iacc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableUpdatedAt(t *time.Time) *IPAccessControlCreate {
	if t != nil {
		iacc.SetUpdatedAt(*t)
	}
	return iacc
}

// SetCreatedBy sets the "created_by" field.
func (iacc *IPAccessControlCreate) SetCreatedBy(s string) *IPAccessControlCreate {
	iacc.mutation.SetCreatedBy(s)
	return iacc
}

// SetUpdatedBy sets the "updated_by" field.
func (iacc *IPAccessControlCreate) SetUpdatedBy(s string) *IPAccessControlCreate {
	iacc.mutation.SetUpdatedBy(s)
	return iacc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableUpdatedBy(s *string) *IPAccessControlCreate {
	if s != nil {
		iacc.SetUpdatedBy(*s)
	}
	return iacc
}

// SetIPAddress sets the "ip_address" field.
func (iacc *IPAccessControlCreate) SetIPAddress(s string) *IPAccessControlCreate {
	iacc.mutation.SetIPAddress(s)
	return iacc
}

// SetTCPStage sets the "tcp_stage" field.
func (iacc *IPAccessControlCreate) SetTCPStage(b bool) *IPAccessControlCreate {
	iacc.mutation.SetTCPStage(b)
	return iacc
}

// SetNillableTCPStage sets the "tcp_stage" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableTCPStage(b *bool) *IPAccessControlCreate {
	if b != nil {
		iacc.SetTCPStage(*b)
	}
	return iacc
}

// SetTCPLive sets the "tcp_live" field.
func (iacc *IPAccessControlCreate) SetTCPLive(b bool) *IPAccessControlCreate {
	iacc.mutation.SetTCPLive(b)
	return iacc
}

// SetNillableTCPLive sets the "tcp_live" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableTCPLive(b *bool) *IPAccessControlCreate {
	if b != nil {
		iacc.SetTCPLive(*b)
	}
	return iacc
}

// SetRabbitmqStage sets the "rabbitmq_stage" field.
func (iacc *IPAccessControlCreate) SetRabbitmqStage(b bool) *IPAccessControlCreate {
	iacc.mutation.SetRabbitmqStage(b)
	return iacc
}

// SetNillableRabbitmqStage sets the "rabbitmq_stage" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableRabbitmqStage(b *bool) *IPAccessControlCreate {
	if b != nil {
		iacc.SetRabbitmqStage(*b)
	}
	return iacc
}

// SetRabbitmqLive sets the "rabbitmq_live" field.
func (iacc *IPAccessControlCreate) SetRabbitmqLive(b bool) *IPAccessControlCreate {
	iacc.mutation.SetRabbitmqLive(b)
	return iacc
}

// SetNillableRabbitmqLive sets the "rabbitmq_live" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableRabbitmqLive(b *bool) *IPAccessControlCreate {
	if b != nil {
		iacc.SetRabbitmqLive(*b)
	}
	return iacc
}

// SetTranslationsRmq sets the "translations_rmq" field.
func (iacc *IPAccessControlCreate) SetTranslationsRmq(b bool) *IPAccessControlCreate {
	iacc.mutation.SetTranslationsRmq(b)
	return iacc
}

// SetNillableTranslationsRmq sets the "translations_rmq" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableTranslationsRmq(b *bool) *IPAccessControlCreate {
	if b != nil {
		iacc.SetTranslationsRmq(*b)
	}
	return iacc
}

// SetTranslationsTCP sets the "translations_tcp" field.
func (iacc *IPAccessControlCreate) SetTranslationsTCP(b bool) *IPAccessControlCreate {
	iacc.mutation.SetTranslationsTCP(b)
	return iacc
}

// SetNillableTranslationsTCP sets the "translations_tcp" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableTranslationsTCP(b *bool) *IPAccessControlCreate {
	if b != nil {
		iacc.SetTranslationsTCP(*b)
	}
	return iacc
}

// SetActive sets the "active" field.
func (iacc *IPAccessControlCreate) SetActive(b bool) *IPAccessControlCreate {
	iacc.mutation.SetActive(b)
	return iacc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (iacc *IPAccessControlCreate) SetNillableActive(b *bool) *IPAccessControlCreate {
	if b != nil {
		iacc.SetActive(*b)
	}
	return iacc
}

// SetID sets the "id" field.
func (iacc *IPAccessControlCreate) SetID(i int64) *IPAccessControlCreate {
	iacc.mutation.SetID(i)
	return iacc
}

// Mutation returns the IPAccessControlMutation object of the builder.
func (iacc *IPAccessControlCreate) Mutation() *IPAccessControlMutation {
	return iacc.mutation
}

// Save creates the IPAccessControl in the database.
func (iacc *IPAccessControlCreate) Save(ctx context.Context) (*IPAccessControl, error) {
	iacc.defaults()
	return withHooks(ctx, iacc.sqlSave, iacc.mutation, iacc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iacc *IPAccessControlCreate) SaveX(ctx context.Context) *IPAccessControl {
	v, err := iacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iacc *IPAccessControlCreate) Exec(ctx context.Context) error {
	_, err := iacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacc *IPAccessControlCreate) ExecX(ctx context.Context) {
	if err := iacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iacc *IPAccessControlCreate) defaults() {
	if _, ok := iacc.mutation.CreatedAt(); !ok {
		v := ipaccesscontrol.DefaultCreatedAt()
		iacc.mutation.SetCreatedAt(v)
	}
	if _, ok := iacc.mutation.TCPStage(); !ok {
		v := ipaccesscontrol.DefaultTCPStage
		iacc.mutation.SetTCPStage(v)
	}
	if _, ok := iacc.mutation.TCPLive(); !ok {
		v := ipaccesscontrol.DefaultTCPLive
		iacc.mutation.SetTCPLive(v)
	}
	if _, ok := iacc.mutation.RabbitmqStage(); !ok {
		v := ipaccesscontrol.DefaultRabbitmqStage
		iacc.mutation.SetRabbitmqStage(v)
	}
	if _, ok := iacc.mutation.RabbitmqLive(); !ok {
		v := ipaccesscontrol.DefaultRabbitmqLive
		iacc.mutation.SetRabbitmqLive(v)
	}
	if _, ok := iacc.mutation.TranslationsRmq(); !ok {
		v := ipaccesscontrol.DefaultTranslationsRmq
		iacc.mutation.SetTranslationsRmq(v)
	}
	if _, ok := iacc.mutation.TranslationsTCP(); !ok {
		v := ipaccesscontrol.DefaultTranslationsTCP
		iacc.mutation.SetTranslationsTCP(v)
	}
	if _, ok := iacc.mutation.Active(); !ok {
		v := ipaccesscontrol.DefaultActive
		iacc.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iacc *IPAccessControlCreate) check() error {
	if _, ok := iacc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IPAccessControl.created_at"`)}
	}
	if _, ok := iacc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "IPAccessControl.created_by"`)}
	}
	if _, ok := iacc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "IPAccessControl.ip_address"`)}
	}
	if _, ok := iacc.mutation.TCPStage(); !ok {
		return &ValidationError{Name: "tcp_stage", err: errors.New(`ent: missing required field "IPAccessControl.tcp_stage"`)}
	}
	if _, ok := iacc.mutation.TCPLive(); !ok {
		return &ValidationError{Name: "tcp_live", err: errors.New(`ent: missing required field "IPAccessControl.tcp_live"`)}
	}
	if _, ok := iacc.mutation.RabbitmqStage(); !ok {
		return &ValidationError{Name: "rabbitmq_stage", err: errors.New(`ent: missing required field "IPAccessControl.rabbitmq_stage"`)}
	}
	if _, ok := iacc.mutation.RabbitmqLive(); !ok {
		return &ValidationError{Name: "rabbitmq_live", err: errors.New(`ent: missing required field "IPAccessControl.rabbitmq_live"`)}
	}
	if _, ok := iacc.mutation.TranslationsRmq(); !ok {
		return &ValidationError{Name: "translations_rmq", err: errors.New(`ent: missing required field "IPAccessControl.translations_rmq"`)}
	}
	if _, ok := iacc.mutation.TranslationsTCP(); !ok {
		return &ValidationError{Name: "translations_tcp", err: errors.New(`ent: missing required field "IPAccessControl.translations_tcp"`)}
	}
	if _, ok := iacc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "IPAccessControl.active"`)}
	}
	return nil
}

func (iacc *IPAccessControlCreate) sqlSave(ctx context.Context) (*IPAccessControl, error) {
	if err := iacc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	iacc.mutation.id = &_node.ID
	iacc.mutation.done = true
	return _node, nil
}

func (iacc *IPAccessControlCreate) createSpec() (*IPAccessControl, *sqlgraph.CreateSpec) {
	var (
		_node = &IPAccessControl{config: iacc.config}
		_spec = sqlgraph.NewCreateSpec(ipaccesscontrol.Table, sqlgraph.NewFieldSpec(ipaccesscontrol.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = iacc.conflict
	if id, ok := iacc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := iacc.mutation.CreatedAt(); ok {
		_spec.SetField(ipaccesscontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := iacc.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaccesscontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := iacc.mutation.CreatedBy(); ok {
		_spec.SetField(ipaccesscontrol.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := iacc.mutation.UpdatedBy(); ok {
		_spec.SetField(ipaccesscontrol.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = &value
	}
	if value, ok := iacc.mutation.IPAddress(); ok {
		_spec.SetField(ipaccesscontrol.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := iacc.mutation.TCPStage(); ok {
		_spec.SetField(ipaccesscontrol.FieldTCPStage, field.TypeBool, value)
		_node.TCPStage = value
	}
	if value, ok := iacc.mutation.TCPLive(); ok {
		_spec.SetField(ipaccesscontrol.FieldTCPLive, field.TypeBool, value)
		_node.TCPLive = value
	}
	if value, ok := iacc.mutation.RabbitmqStage(); ok {
		_spec.SetField(ipaccesscontrol.FieldRabbitmqStage, field.TypeBool, value)
		_node.RabbitmqStage = value
	}
	if value, ok := iacc.mutation.RabbitmqLive(); ok {
		_spec.SetField(ipaccesscontrol.FieldRabbitmqLive, field.TypeBool, value)
		_node.RabbitmqLive = value
	}
	if value, ok := iacc.mutation.TranslationsRmq(); ok {
		_spec.SetField(ipaccesscontrol.FieldTranslationsRmq, field.TypeBool, value)
		_node.TranslationsRmq = value
	}
	if value, ok := iacc.mutation.TranslationsTCP(); ok {
		_spec.SetField(ipaccesscontrol.FieldTranslationsTCP, field.TypeBool, value)
		_node.TranslationsTCP = value
	}
	if value, ok := iacc.mutation.Active(); ok {
		_spec.SetField(ipaccesscontrol.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IPAccessControl.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IPAccessControlUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (iacc *IPAccessControlCreate) OnConflict(opts ...sql.ConflictOption) *IPAccessControlUpsertOne {
	iacc.conflict = opts
	return &IPAccessControlUpsertOne{
		create: iacc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IPAccessControl.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iacc *IPAccessControlCreate) OnConflictColumns(columns ...string) *IPAccessControlUpsertOne {
	iacc.conflict = append(iacc.conflict, sql.ConflictColumns(columns...))
	return &IPAccessControlUpsertOne{
		create: iacc,
	}
}

type (
	// IPAccessControlUpsertOne is the builder for "upsert"-ing
	//  one IPAccessControl node.
	IPAccessControlUpsertOne struct {
		create *IPAccessControlCreate
	}

	// IPAccessControlUpsert is the "OnConflict" setter.
	IPAccessControlUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *IPAccessControlUpsert) SetUpdatedAt(v time.Time) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateUpdatedAt() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *IPAccessControlUpsert) ClearUpdatedAt() *IPAccessControlUpsert {
	u.SetNull(ipaccesscontrol.FieldUpdatedAt)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IPAccessControlUpsert) SetUpdatedBy(v string) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateUpdatedBy() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldUpdatedBy)
	return u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *IPAccessControlUpsert) ClearUpdatedBy() *IPAccessControlUpsert {
	u.SetNull(ipaccesscontrol.FieldUpdatedBy)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *IPAccessControlUpsert) SetIPAddress(v string) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateIPAddress() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldIPAddress)
	return u
}

// SetTCPStage sets the "tcp_stage" field.
func (u *IPAccessControlUpsert) SetTCPStage(v bool) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldTCPStage, v)
	return u
}

// UpdateTCPStage sets the "tcp_stage" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateTCPStage() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldTCPStage)
	return u
}

// SetTCPLive sets the "tcp_live" field.
func (u *IPAccessControlUpsert) SetTCPLive(v bool) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldTCPLive, v)
	return u
}

// UpdateTCPLive sets the "tcp_live" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateTCPLive() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldTCPLive)
	return u
}

// SetRabbitmqStage sets the "rabbitmq_stage" field.
func (u *IPAccessControlUpsert) SetRabbitmqStage(v bool) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldRabbitmqStage, v)
	return u
}

// UpdateRabbitmqStage sets the "rabbitmq_stage" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateRabbitmqStage() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldRabbitmqStage)
	return u
}

// SetRabbitmqLive sets the "rabbitmq_live" field.
func (u *IPAccessControlUpsert) SetRabbitmqLive(v bool) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldRabbitmqLive, v)
	return u
}

// UpdateRabbitmqLive sets the "rabbitmq_live" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateRabbitmqLive() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldRabbitmqLive)
	return u
}

// SetTranslationsRmq sets the "translations_rmq" field.
func (u *IPAccessControlUpsert) SetTranslationsRmq(v bool) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldTranslationsRmq, v)
	return u
}

// UpdateTranslationsRmq sets the "translations_rmq" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateTranslationsRmq() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldTranslationsRmq)
	return u
}

// SetTranslationsTCP sets the "translations_tcp" field.
func (u *IPAccessControlUpsert) SetTranslationsTCP(v bool) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldTranslationsTCP, v)
	return u
}

// UpdateTranslationsTCP sets the "translations_tcp" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateTranslationsTCP() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldTranslationsTCP)
	return u
}

// SetActive sets the "active" field.
func (u *IPAccessControlUpsert) SetActive(v bool) *IPAccessControlUpsert {
	u.Set(ipaccesscontrol.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *IPAccessControlUpsert) UpdateActive() *IPAccessControlUpsert {
	u.SetExcluded(ipaccesscontrol.FieldActive)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.IPAccessControl.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ipaccesscontrol.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IPAccessControlUpsertOne) UpdateNewValues() *IPAccessControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(ipaccesscontrol.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ipaccesscontrol.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.CreatedBy(); exists {
			s.SetIgnore(ipaccesscontrol.FieldCreatedBy)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IPAccessControl.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *IPAccessControlUpsertOne) Ignore() *IPAccessControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IPAccessControlUpsertOne) DoNothing() *IPAccessControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IPAccessControlCreate.OnConflict
// documentation for more info.
func (u *IPAccessControlUpsertOne) Update(set func(*IPAccessControlUpsert)) *IPAccessControlUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IPAccessControlUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IPAccessControlUpsertOne) SetUpdatedAt(v time.Time) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateUpdatedAt() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *IPAccessControlUpsertOne) ClearUpdatedAt() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IPAccessControlUpsertOne) SetUpdatedBy(v string) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateUpdatedBy() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *IPAccessControlUpsertOne) ClearUpdatedBy() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *IPAccessControlUpsertOne) SetIPAddress(v string) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateIPAddress() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateIPAddress()
	})
}

// SetTCPStage sets the "tcp_stage" field.
func (u *IPAccessControlUpsertOne) SetTCPStage(v bool) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetTCPStage(v)
	})
}

// UpdateTCPStage sets the "tcp_stage" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateTCPStage() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateTCPStage()
	})
}

// SetTCPLive sets the "tcp_live" field.
func (u *IPAccessControlUpsertOne) SetTCPLive(v bool) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetTCPLive(v)
	})
}

// UpdateTCPLive sets the "tcp_live" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateTCPLive() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateTCPLive()
	})
}

// SetRabbitmqStage sets the "rabbitmq_stage" field.
func (u *IPAccessControlUpsertOne) SetRabbitmqStage(v bool) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetRabbitmqStage(v)
	})
}

// UpdateRabbitmqStage sets the "rabbitmq_stage" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateRabbitmqStage() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateRabbitmqStage()
	})
}

// SetRabbitmqLive sets the "rabbitmq_live" field.
func (u *IPAccessControlUpsertOne) SetRabbitmqLive(v bool) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetRabbitmqLive(v)
	})
}

// UpdateRabbitmqLive sets the "rabbitmq_live" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateRabbitmqLive() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateRabbitmqLive()
	})
}

// SetTranslationsRmq sets the "translations_rmq" field.
func (u *IPAccessControlUpsertOne) SetTranslationsRmq(v bool) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetTranslationsRmq(v)
	})
}

// UpdateTranslationsRmq sets the "translations_rmq" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateTranslationsRmq() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateTranslationsRmq()
	})
}

// SetTranslationsTCP sets the "translations_tcp" field.
func (u *IPAccessControlUpsertOne) SetTranslationsTCP(v bool) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetTranslationsTCP(v)
	})
}

// UpdateTranslationsTCP sets the "translations_tcp" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateTranslationsTCP() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateTranslationsTCP()
	})
}

// SetActive sets the "active" field.
func (u *IPAccessControlUpsertOne) SetActive(v bool) *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *IPAccessControlUpsertOne) UpdateActive() *IPAccessControlUpsertOne {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateActive()
	})
}

// Exec executes the query.
func (u *IPAccessControlUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IPAccessControlCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IPAccessControlUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *IPAccessControlUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *IPAccessControlUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// IPAccessControlCreateBulk is the builder for creating many IPAccessControl entities in bulk.
type IPAccessControlCreateBulk struct {
	config
	err      error
	builders []*IPAccessControlCreate
	conflict []sql.ConflictOption
}

// Save creates the IPAccessControl entities in the database.
func (iaccb *IPAccessControlCreateBulk) Save(ctx context.Context) ([]*IPAccessControl, error) {
	if iaccb.err != nil {
		return nil, iaccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iaccb.builders))
	nodes := make([]*IPAccessControl, len(iaccb.builders))
	mutators := make([]Mutator, len(iaccb.builders))
	for i := range iaccb.builders {
		func(i int, root context.Context) {
			builder := iaccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPAccessControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iaccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = iaccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iaccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iaccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iaccb *IPAccessControlCreateBulk) SaveX(ctx context.Context) []*IPAccessControl {
	v, err := iaccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iaccb *IPAccessControlCreateBulk) Exec(ctx context.Context) error {
	_, err := iaccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iaccb *IPAccessControlCreateBulk) ExecX(ctx context.Context) {
	if err := iaccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.IPAccessControl.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.IPAccessControlUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (iaccb *IPAccessControlCreateBulk) OnConflict(opts ...sql.ConflictOption) *IPAccessControlUpsertBulk {
	iaccb.conflict = opts
	return &IPAccessControlUpsertBulk{
		create: iaccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.IPAccessControl.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (iaccb *IPAccessControlCreateBulk) OnConflictColumns(columns ...string) *IPAccessControlUpsertBulk {
	iaccb.conflict = append(iaccb.conflict, sql.ConflictColumns(columns...))
	return &IPAccessControlUpsertBulk{
		create: iaccb,
	}
}

// IPAccessControlUpsertBulk is the builder for "upsert"-ing
// a bulk of IPAccessControl nodes.
type IPAccessControlUpsertBulk struct {
	create *IPAccessControlCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.IPAccessControl.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(ipaccesscontrol.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *IPAccessControlUpsertBulk) UpdateNewValues() *IPAccessControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(ipaccesscontrol.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ipaccesscontrol.FieldCreatedAt)
			}
			if _, exists := b.mutation.CreatedBy(); exists {
				s.SetIgnore(ipaccesscontrol.FieldCreatedBy)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.IPAccessControl.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *IPAccessControlUpsertBulk) Ignore() *IPAccessControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *IPAccessControlUpsertBulk) DoNothing() *IPAccessControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the IPAccessControlCreateBulk.OnConflict
// documentation for more info.
func (u *IPAccessControlUpsertBulk) Update(set func(*IPAccessControlUpsert)) *IPAccessControlUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&IPAccessControlUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *IPAccessControlUpsertBulk) SetUpdatedAt(v time.Time) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateUpdatedAt() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *IPAccessControlUpsertBulk) ClearUpdatedAt() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *IPAccessControlUpsertBulk) SetUpdatedBy(v string) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateUpdatedBy() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateUpdatedBy()
	})
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (u *IPAccessControlUpsertBulk) ClearUpdatedBy() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.ClearUpdatedBy()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *IPAccessControlUpsertBulk) SetIPAddress(v string) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateIPAddress() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateIPAddress()
	})
}

// SetTCPStage sets the "tcp_stage" field.
func (u *IPAccessControlUpsertBulk) SetTCPStage(v bool) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetTCPStage(v)
	})
}

// UpdateTCPStage sets the "tcp_stage" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateTCPStage() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateTCPStage()
	})
}

// SetTCPLive sets the "tcp_live" field.
func (u *IPAccessControlUpsertBulk) SetTCPLive(v bool) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetTCPLive(v)
	})
}

// UpdateTCPLive sets the "tcp_live" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateTCPLive() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateTCPLive()
	})
}

// SetRabbitmqStage sets the "rabbitmq_stage" field.
func (u *IPAccessControlUpsertBulk) SetRabbitmqStage(v bool) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetRabbitmqStage(v)
	})
}

// UpdateRabbitmqStage sets the "rabbitmq_stage" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateRabbitmqStage() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateRabbitmqStage()
	})
}

// SetRabbitmqLive sets the "rabbitmq_live" field.
func (u *IPAccessControlUpsertBulk) SetRabbitmqLive(v bool) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetRabbitmqLive(v)
	})
}

// UpdateRabbitmqLive sets the "rabbitmq_live" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateRabbitmqLive() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateRabbitmqLive()
	})
}

// SetTranslationsRmq sets the "translations_rmq" field.
func (u *IPAccessControlUpsertBulk) SetTranslationsRmq(v bool) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetTranslationsRmq(v)
	})
}

// UpdateTranslationsRmq sets the "translations_rmq" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateTranslationsRmq() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateTranslationsRmq()
	})
}

// SetTranslationsTCP sets the "translations_tcp" field.
func (u *IPAccessControlUpsertBulk) SetTranslationsTCP(v bool) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetTranslationsTCP(v)
	})
}

// UpdateTranslationsTCP sets the "translations_tcp" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateTranslationsTCP() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateTranslationsTCP()
	})
}

// SetActive sets the "active" field.
func (u *IPAccessControlUpsertBulk) SetActive(v bool) *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *IPAccessControlUpsertBulk) UpdateActive() *IPAccessControlUpsertBulk {
	return u.Update(func(s *IPAccessControlUpsert) {
		s.UpdateActive()
	})
}

// Exec executes the query.
func (u *IPAccessControlUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the IPAccessControlCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for IPAccessControlCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *IPAccessControlUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
