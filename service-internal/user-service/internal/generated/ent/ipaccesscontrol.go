// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/khuongdo95/go-service/internal/generated/ent/ipaccesscontrol"
)

// IPAccessControl is the model entity for the IPAccessControl schema.
type IPAccessControl struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy *string `json:"updated_by,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// TCPStage holds the value of the "tcp_stage" field.
	TCPStage bool `json:"tcp_stage,omitempty"`
	// TCPLive holds the value of the "tcp_live" field.
	TCPLive bool `json:"tcp_live,omitempty"`
	// RabbitmqStage holds the value of the "rabbitmq_stage" field.
	RabbitmqStage bool `json:"rabbitmq_stage,omitempty"`
	// RabbitmqLive holds the value of the "rabbitmq_live" field.
	RabbitmqLive bool `json:"rabbitmq_live,omitempty"`
	// TranslationsRmq holds the value of the "translations_rmq" field.
	TranslationsRmq bool `json:"translations_rmq,omitempty"`
	// TranslationsTCP holds the value of the "translations_tcp" field.
	TranslationsTCP bool `json:"translations_tcp,omitempty"`
	// Active holds the value of the "active" field.
	Active       bool `json:"active,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IPAccessControl) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ipaccesscontrol.FieldTCPStage, ipaccesscontrol.FieldTCPLive, ipaccesscontrol.FieldRabbitmqStage, ipaccesscontrol.FieldRabbitmqLive, ipaccesscontrol.FieldTranslationsRmq, ipaccesscontrol.FieldTranslationsTCP, ipaccesscontrol.FieldActive:
			values[i] = new(sql.NullBool)
		case ipaccesscontrol.FieldID:
			values[i] = new(sql.NullInt64)
		case ipaccesscontrol.FieldCreatedBy, ipaccesscontrol.FieldUpdatedBy, ipaccesscontrol.FieldIPAddress:
			values[i] = new(sql.NullString)
		case ipaccesscontrol.FieldCreatedAt, ipaccesscontrol.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IPAccessControl fields.
func (iac *IPAccessControl) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ipaccesscontrol.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			iac.ID = int64(value.Int64)
		case ipaccesscontrol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				iac.CreatedAt = value.Time
			}
		case ipaccesscontrol.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				iac.UpdatedAt = new(time.Time)
				*iac.UpdatedAt = value.Time
			}
		case ipaccesscontrol.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				iac.CreatedBy = value.String
			}
		case ipaccesscontrol.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				iac.UpdatedBy = new(string)
				*iac.UpdatedBy = value.String
			}
		case ipaccesscontrol.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				iac.IPAddress = value.String
			}
		case ipaccesscontrol.FieldTCPStage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field tcp_stage", values[i])
			} else if value.Valid {
				iac.TCPStage = value.Bool
			}
		case ipaccesscontrol.FieldTCPLive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field tcp_live", values[i])
			} else if value.Valid {
				iac.TCPLive = value.Bool
			}
		case ipaccesscontrol.FieldRabbitmqStage:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field rabbitmq_stage", values[i])
			} else if value.Valid {
				iac.RabbitmqStage = value.Bool
			}
		case ipaccesscontrol.FieldRabbitmqLive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field rabbitmq_live", values[i])
			} else if value.Valid {
				iac.RabbitmqLive = value.Bool
			}
		case ipaccesscontrol.FieldTranslationsRmq:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field translations_rmq", values[i])
			} else if value.Valid {
				iac.TranslationsRmq = value.Bool
			}
		case ipaccesscontrol.FieldTranslationsTCP:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field translations_tcp", values[i])
			} else if value.Valid {
				iac.TranslationsTCP = value.Bool
			}
		case ipaccesscontrol.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				iac.Active = value.Bool
			}
		default:
			iac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IPAccessControl.
// This includes values selected through modifiers, order, etc.
func (iac *IPAccessControl) Value(name string) (ent.Value, error) {
	return iac.selectValues.Get(name)
}

// Update returns a builder for updating this IPAccessControl.
// Note that you need to call IPAccessControl.Unwrap() before calling this method if this IPAccessControl
// was returned from a transaction, and the transaction was committed or rolled back.
func (iac *IPAccessControl) Update() *IPAccessControlUpdateOne {
	return NewIPAccessControlClient(iac.config).UpdateOne(iac)
}

// Unwrap unwraps the IPAccessControl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (iac *IPAccessControl) Unwrap() *IPAccessControl {
	_tx, ok := iac.config.driver.(*txDriver)
	if !ok {
		panic("ent: IPAccessControl is not a transactional entity")
	}
	iac.config.driver = _tx.drv
	return iac
}

// String implements the fmt.Stringer.
func (iac *IPAccessControl) String() string {
	var builder strings.Builder
	builder.WriteString("IPAccessControl(")
	builder.WriteString(fmt.Sprintf("id=%v, ", iac.ID))
	builder.WriteString("created_at=")
	builder.WriteString(iac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := iac.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(iac.CreatedBy)
	builder.WriteString(", ")
	if v := iac.UpdatedBy; v != nil {
		builder.WriteString("updated_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(iac.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("tcp_stage=")
	builder.WriteString(fmt.Sprintf("%v", iac.TCPStage))
	builder.WriteString(", ")
	builder.WriteString("tcp_live=")
	builder.WriteString(fmt.Sprintf("%v", iac.TCPLive))
	builder.WriteString(", ")
	builder.WriteString("rabbitmq_stage=")
	builder.WriteString(fmt.Sprintf("%v", iac.RabbitmqStage))
	builder.WriteString(", ")
	builder.WriteString("rabbitmq_live=")
	builder.WriteString(fmt.Sprintf("%v", iac.RabbitmqLive))
	builder.WriteString(", ")
	builder.WriteString("translations_rmq=")
	builder.WriteString(fmt.Sprintf("%v", iac.TranslationsRmq))
	builder.WriteString(", ")
	builder.WriteString("translations_tcp=")
	builder.WriteString(fmt.Sprintf("%v", iac.TranslationsTCP))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", iac.Active))
	builder.WriteByte(')')
	return builder.String()
}

// IPAccessControls is a parsable slice of IPAccessControl.
type IPAccessControls []*IPAccessControl
