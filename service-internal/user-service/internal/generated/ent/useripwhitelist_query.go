// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khuongdo95/go-service/internal/generated/ent/predicate"
	"github.com/khuongdo95/go-service/internal/generated/ent/user"
	"github.com/khuongdo95/go-service/internal/generated/ent/useripwhitelist"
)

// UserIpWhiteListQuery is the builder for querying UserIpWhiteList entities.
type UserIpWhiteListQuery struct {
	config
	ctx        *QueryContext
	order      []useripwhitelist.OrderOption
	inters     []Interceptor
	predicates []predicate.UserIpWhiteList
	withUser   *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserIpWhiteListQuery builder.
func (uiwlq *UserIpWhiteListQuery) Where(ps ...predicate.UserIpWhiteList) *UserIpWhiteListQuery {
	uiwlq.predicates = append(uiwlq.predicates, ps...)
	return uiwlq
}

// Limit the number of records to be returned by this query.
func (uiwlq *UserIpWhiteListQuery) Limit(limit int) *UserIpWhiteListQuery {
	uiwlq.ctx.Limit = &limit
	return uiwlq
}

// Offset to start from.
func (uiwlq *UserIpWhiteListQuery) Offset(offset int) *UserIpWhiteListQuery {
	uiwlq.ctx.Offset = &offset
	return uiwlq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uiwlq *UserIpWhiteListQuery) Unique(unique bool) *UserIpWhiteListQuery {
	uiwlq.ctx.Unique = &unique
	return uiwlq
}

// Order specifies how the records should be ordered.
func (uiwlq *UserIpWhiteListQuery) Order(o ...useripwhitelist.OrderOption) *UserIpWhiteListQuery {
	uiwlq.order = append(uiwlq.order, o...)
	return uiwlq
}

// QueryUser chains the current query on the "user" edge.
func (uiwlq *UserIpWhiteListQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: uiwlq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uiwlq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uiwlq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(useripwhitelist.Table, useripwhitelist.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, useripwhitelist.UserTable, useripwhitelist.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(uiwlq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserIpWhiteList entity from the query.
// Returns a *NotFoundError when no UserIpWhiteList was found.
func (uiwlq *UserIpWhiteListQuery) First(ctx context.Context) (*UserIpWhiteList, error) {
	nodes, err := uiwlq.Limit(1).All(setContextOp(ctx, uiwlq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{useripwhitelist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uiwlq *UserIpWhiteListQuery) FirstX(ctx context.Context) *UserIpWhiteList {
	node, err := uiwlq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserIpWhiteList ID from the query.
// Returns a *NotFoundError when no UserIpWhiteList ID was found.
func (uiwlq *UserIpWhiteListQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uiwlq.Limit(1).IDs(setContextOp(ctx, uiwlq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{useripwhitelist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uiwlq *UserIpWhiteListQuery) FirstIDX(ctx context.Context) int {
	id, err := uiwlq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserIpWhiteList entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserIpWhiteList entity is found.
// Returns a *NotFoundError when no UserIpWhiteList entities are found.
func (uiwlq *UserIpWhiteListQuery) Only(ctx context.Context) (*UserIpWhiteList, error) {
	nodes, err := uiwlq.Limit(2).All(setContextOp(ctx, uiwlq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{useripwhitelist.Label}
	default:
		return nil, &NotSingularError{useripwhitelist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uiwlq *UserIpWhiteListQuery) OnlyX(ctx context.Context) *UserIpWhiteList {
	node, err := uiwlq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserIpWhiteList ID in the query.
// Returns a *NotSingularError when more than one UserIpWhiteList ID is found.
// Returns a *NotFoundError when no entities are found.
func (uiwlq *UserIpWhiteListQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uiwlq.Limit(2).IDs(setContextOp(ctx, uiwlq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{useripwhitelist.Label}
	default:
		err = &NotSingularError{useripwhitelist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uiwlq *UserIpWhiteListQuery) OnlyIDX(ctx context.Context) int {
	id, err := uiwlq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserIpWhiteLists.
func (uiwlq *UserIpWhiteListQuery) All(ctx context.Context) ([]*UserIpWhiteList, error) {
	ctx = setContextOp(ctx, uiwlq.ctx, ent.OpQueryAll)
	if err := uiwlq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserIpWhiteList, *UserIpWhiteListQuery]()
	return withInterceptors[[]*UserIpWhiteList](ctx, uiwlq, qr, uiwlq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uiwlq *UserIpWhiteListQuery) AllX(ctx context.Context) []*UserIpWhiteList {
	nodes, err := uiwlq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserIpWhiteList IDs.
func (uiwlq *UserIpWhiteListQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uiwlq.ctx.Unique == nil && uiwlq.path != nil {
		uiwlq.Unique(true)
	}
	ctx = setContextOp(ctx, uiwlq.ctx, ent.OpQueryIDs)
	if err = uiwlq.Select(useripwhitelist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uiwlq *UserIpWhiteListQuery) IDsX(ctx context.Context) []int {
	ids, err := uiwlq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uiwlq *UserIpWhiteListQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uiwlq.ctx, ent.OpQueryCount)
	if err := uiwlq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uiwlq, querierCount[*UserIpWhiteListQuery](), uiwlq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uiwlq *UserIpWhiteListQuery) CountX(ctx context.Context) int {
	count, err := uiwlq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uiwlq *UserIpWhiteListQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uiwlq.ctx, ent.OpQueryExist)
	switch _, err := uiwlq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uiwlq *UserIpWhiteListQuery) ExistX(ctx context.Context) bool {
	exist, err := uiwlq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserIpWhiteListQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uiwlq *UserIpWhiteListQuery) Clone() *UserIpWhiteListQuery {
	if uiwlq == nil {
		return nil
	}
	return &UserIpWhiteListQuery{
		config:     uiwlq.config,
		ctx:        uiwlq.ctx.Clone(),
		order:      append([]useripwhitelist.OrderOption{}, uiwlq.order...),
		inters:     append([]Interceptor{}, uiwlq.inters...),
		predicates: append([]predicate.UserIpWhiteList{}, uiwlq.predicates...),
		withUser:   uiwlq.withUser.Clone(),
		// clone intermediate query.
		sql:  uiwlq.sql.Clone(),
		path: uiwlq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (uiwlq *UserIpWhiteListQuery) WithUser(opts ...func(*UserQuery)) *UserIpWhiteListQuery {
	query := (&UserClient{config: uiwlq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uiwlq.withUser = query
	return uiwlq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserIpWhiteList.Query().
//		GroupBy(useripwhitelist.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uiwlq *UserIpWhiteListQuery) GroupBy(field string, fields ...string) *UserIpWhiteListGroupBy {
	uiwlq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserIpWhiteListGroupBy{build: uiwlq}
	grbuild.flds = &uiwlq.ctx.Fields
	grbuild.label = useripwhitelist.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.UserIpWhiteList.Query().
//		Select(useripwhitelist.FieldCreatedAt).
//		Scan(ctx, &v)
func (uiwlq *UserIpWhiteListQuery) Select(fields ...string) *UserIpWhiteListSelect {
	uiwlq.ctx.Fields = append(uiwlq.ctx.Fields, fields...)
	sbuild := &UserIpWhiteListSelect{UserIpWhiteListQuery: uiwlq}
	sbuild.label = useripwhitelist.Label
	sbuild.flds, sbuild.scan = &uiwlq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserIpWhiteListSelect configured with the given aggregations.
func (uiwlq *UserIpWhiteListQuery) Aggregate(fns ...AggregateFunc) *UserIpWhiteListSelect {
	return uiwlq.Select().Aggregate(fns...)
}

func (uiwlq *UserIpWhiteListQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uiwlq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uiwlq); err != nil {
				return err
			}
		}
	}
	for _, f := range uiwlq.ctx.Fields {
		if !useripwhitelist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uiwlq.path != nil {
		prev, err := uiwlq.path(ctx)
		if err != nil {
			return err
		}
		uiwlq.sql = prev
	}
	return nil
}

func (uiwlq *UserIpWhiteListQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserIpWhiteList, error) {
	var (
		nodes       = []*UserIpWhiteList{}
		_spec       = uiwlq.querySpec()
		loadedTypes = [1]bool{
			uiwlq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserIpWhiteList).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserIpWhiteList{config: uiwlq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uiwlq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uiwlq.withUser; query != nil {
		if err := uiwlq.loadUser(ctx, query, nodes, nil,
			func(n *UserIpWhiteList, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uiwlq *UserIpWhiteListQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserIpWhiteList, init func(*UserIpWhiteList), assign func(*UserIpWhiteList, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*UserIpWhiteList)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (uiwlq *UserIpWhiteListQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uiwlq.querySpec()
	_spec.Node.Columns = uiwlq.ctx.Fields
	if len(uiwlq.ctx.Fields) > 0 {
		_spec.Unique = uiwlq.ctx.Unique != nil && *uiwlq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uiwlq.driver, _spec)
}

func (uiwlq *UserIpWhiteListQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(useripwhitelist.Table, useripwhitelist.Columns, sqlgraph.NewFieldSpec(useripwhitelist.FieldID, field.TypeInt))
	_spec.From = uiwlq.sql
	if unique := uiwlq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uiwlq.path != nil {
		_spec.Unique = true
	}
	if fields := uiwlq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useripwhitelist.FieldID)
		for i := range fields {
			if fields[i] != useripwhitelist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if uiwlq.withUser != nil {
			_spec.Node.AddColumnOnce(useripwhitelist.FieldUserID)
		}
	}
	if ps := uiwlq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uiwlq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uiwlq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uiwlq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uiwlq *UserIpWhiteListQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uiwlq.driver.Dialect())
	t1 := builder.Table(useripwhitelist.Table)
	columns := uiwlq.ctx.Fields
	if len(columns) == 0 {
		columns = useripwhitelist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uiwlq.sql != nil {
		selector = uiwlq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uiwlq.ctx.Unique != nil && *uiwlq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uiwlq.predicates {
		p(selector)
	}
	for _, p := range uiwlq.order {
		p(selector)
	}
	if offset := uiwlq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uiwlq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserIpWhiteListGroupBy is the group-by builder for UserIpWhiteList entities.
type UserIpWhiteListGroupBy struct {
	selector
	build *UserIpWhiteListQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uiwlgb *UserIpWhiteListGroupBy) Aggregate(fns ...AggregateFunc) *UserIpWhiteListGroupBy {
	uiwlgb.fns = append(uiwlgb.fns, fns...)
	return uiwlgb
}

// Scan applies the selector query and scans the result into the given value.
func (uiwlgb *UserIpWhiteListGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uiwlgb.build.ctx, ent.OpQueryGroupBy)
	if err := uiwlgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserIpWhiteListQuery, *UserIpWhiteListGroupBy](ctx, uiwlgb.build, uiwlgb, uiwlgb.build.inters, v)
}

func (uiwlgb *UserIpWhiteListGroupBy) sqlScan(ctx context.Context, root *UserIpWhiteListQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uiwlgb.fns))
	for _, fn := range uiwlgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uiwlgb.flds)+len(uiwlgb.fns))
		for _, f := range *uiwlgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uiwlgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uiwlgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserIpWhiteListSelect is the builder for selecting fields of UserIpWhiteList entities.
type UserIpWhiteListSelect struct {
	*UserIpWhiteListQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uiwls *UserIpWhiteListSelect) Aggregate(fns ...AggregateFunc) *UserIpWhiteListSelect {
	uiwls.fns = append(uiwls.fns, fns...)
	return uiwls
}

// Scan applies the selector query and scans the result into the given value.
func (uiwls *UserIpWhiteListSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uiwls.ctx, ent.OpQuerySelect)
	if err := uiwls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserIpWhiteListQuery, *UserIpWhiteListSelect](ctx, uiwls.UserIpWhiteListQuery, uiwls, uiwls.inters, v)
}

func (uiwls *UserIpWhiteListSelect) sqlScan(ctx context.Context, root *UserIpWhiteListQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uiwls.fns))
	for _, fn := range uiwls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uiwls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uiwls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
