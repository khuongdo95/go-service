// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khuongdo95/go-service/internal/generated/ent/ipaccesscontrol"
	"github.com/khuongdo95/go-service/internal/generated/ent/predicate"
)

// IPAccessControlUpdate is the builder for updating IPAccessControl entities.
type IPAccessControlUpdate struct {
	config
	hooks    []Hook
	mutation *IPAccessControlMutation
}

// Where appends a list predicates to the IPAccessControlUpdate builder.
func (iacu *IPAccessControlUpdate) Where(ps ...predicate.IPAccessControl) *IPAccessControlUpdate {
	iacu.mutation.Where(ps...)
	return iacu
}

// SetUpdatedAt sets the "updated_at" field.
func (iacu *IPAccessControlUpdate) SetUpdatedAt(t time.Time) *IPAccessControlUpdate {
	iacu.mutation.SetUpdatedAt(t)
	return iacu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (iacu *IPAccessControlUpdate) ClearUpdatedAt() *IPAccessControlUpdate {
	iacu.mutation.ClearUpdatedAt()
	return iacu
}

// SetUpdatedBy sets the "updated_by" field.
func (iacu *IPAccessControlUpdate) SetUpdatedBy(s string) *IPAccessControlUpdate {
	iacu.mutation.SetUpdatedBy(s)
	return iacu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableUpdatedBy(s *string) *IPAccessControlUpdate {
	if s != nil {
		iacu.SetUpdatedBy(*s)
	}
	return iacu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iacu *IPAccessControlUpdate) ClearUpdatedBy() *IPAccessControlUpdate {
	iacu.mutation.ClearUpdatedBy()
	return iacu
}

// SetIPAddress sets the "ip_address" field.
func (iacu *IPAccessControlUpdate) SetIPAddress(s string) *IPAccessControlUpdate {
	iacu.mutation.SetIPAddress(s)
	return iacu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableIPAddress(s *string) *IPAccessControlUpdate {
	if s != nil {
		iacu.SetIPAddress(*s)
	}
	return iacu
}

// SetTCPStage sets the "tcp_stage" field.
func (iacu *IPAccessControlUpdate) SetTCPStage(b bool) *IPAccessControlUpdate {
	iacu.mutation.SetTCPStage(b)
	return iacu
}

// SetNillableTCPStage sets the "tcp_stage" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableTCPStage(b *bool) *IPAccessControlUpdate {
	if b != nil {
		iacu.SetTCPStage(*b)
	}
	return iacu
}

// SetTCPLive sets the "tcp_live" field.
func (iacu *IPAccessControlUpdate) SetTCPLive(b bool) *IPAccessControlUpdate {
	iacu.mutation.SetTCPLive(b)
	return iacu
}

// SetNillableTCPLive sets the "tcp_live" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableTCPLive(b *bool) *IPAccessControlUpdate {
	if b != nil {
		iacu.SetTCPLive(*b)
	}
	return iacu
}

// SetRabbitmqStage sets the "rabbitmq_stage" field.
func (iacu *IPAccessControlUpdate) SetRabbitmqStage(b bool) *IPAccessControlUpdate {
	iacu.mutation.SetRabbitmqStage(b)
	return iacu
}

// SetNillableRabbitmqStage sets the "rabbitmq_stage" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableRabbitmqStage(b *bool) *IPAccessControlUpdate {
	if b != nil {
		iacu.SetRabbitmqStage(*b)
	}
	return iacu
}

// SetRabbitmqLive sets the "rabbitmq_live" field.
func (iacu *IPAccessControlUpdate) SetRabbitmqLive(b bool) *IPAccessControlUpdate {
	iacu.mutation.SetRabbitmqLive(b)
	return iacu
}

// SetNillableRabbitmqLive sets the "rabbitmq_live" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableRabbitmqLive(b *bool) *IPAccessControlUpdate {
	if b != nil {
		iacu.SetRabbitmqLive(*b)
	}
	return iacu
}

// SetTranslationsRmq sets the "translations_rmq" field.
func (iacu *IPAccessControlUpdate) SetTranslationsRmq(b bool) *IPAccessControlUpdate {
	iacu.mutation.SetTranslationsRmq(b)
	return iacu
}

// SetNillableTranslationsRmq sets the "translations_rmq" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableTranslationsRmq(b *bool) *IPAccessControlUpdate {
	if b != nil {
		iacu.SetTranslationsRmq(*b)
	}
	return iacu
}

// SetTranslationsTCP sets the "translations_tcp" field.
func (iacu *IPAccessControlUpdate) SetTranslationsTCP(b bool) *IPAccessControlUpdate {
	iacu.mutation.SetTranslationsTCP(b)
	return iacu
}

// SetNillableTranslationsTCP sets the "translations_tcp" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableTranslationsTCP(b *bool) *IPAccessControlUpdate {
	if b != nil {
		iacu.SetTranslationsTCP(*b)
	}
	return iacu
}

// SetActive sets the "active" field.
func (iacu *IPAccessControlUpdate) SetActive(b bool) *IPAccessControlUpdate {
	iacu.mutation.SetActive(b)
	return iacu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (iacu *IPAccessControlUpdate) SetNillableActive(b *bool) *IPAccessControlUpdate {
	if b != nil {
		iacu.SetActive(*b)
	}
	return iacu
}

// Mutation returns the IPAccessControlMutation object of the builder.
func (iacu *IPAccessControlUpdate) Mutation() *IPAccessControlMutation {
	return iacu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iacu *IPAccessControlUpdate) Save(ctx context.Context) (int, error) {
	iacu.defaults()
	return withHooks(ctx, iacu.sqlSave, iacu.mutation, iacu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iacu *IPAccessControlUpdate) SaveX(ctx context.Context) int {
	affected, err := iacu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iacu *IPAccessControlUpdate) Exec(ctx context.Context) error {
	_, err := iacu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacu *IPAccessControlUpdate) ExecX(ctx context.Context) {
	if err := iacu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iacu *IPAccessControlUpdate) defaults() {
	if _, ok := iacu.mutation.UpdatedAt(); !ok && !iacu.mutation.UpdatedAtCleared() {
		v := ipaccesscontrol.UpdateDefaultUpdatedAt()
		iacu.mutation.SetUpdatedAt(v)
	}
}

func (iacu *IPAccessControlUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ipaccesscontrol.Table, ipaccesscontrol.Columns, sqlgraph.NewFieldSpec(ipaccesscontrol.FieldID, field.TypeInt64))
	if ps := iacu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iacu.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaccesscontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if iacu.mutation.UpdatedAtCleared() {
		_spec.ClearField(ipaccesscontrol.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := iacu.mutation.UpdatedBy(); ok {
		_spec.SetField(ipaccesscontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if iacu.mutation.UpdatedByCleared() {
		_spec.ClearField(ipaccesscontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := iacu.mutation.IPAddress(); ok {
		_spec.SetField(ipaccesscontrol.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := iacu.mutation.TCPStage(); ok {
		_spec.SetField(ipaccesscontrol.FieldTCPStage, field.TypeBool, value)
	}
	if value, ok := iacu.mutation.TCPLive(); ok {
		_spec.SetField(ipaccesscontrol.FieldTCPLive, field.TypeBool, value)
	}
	if value, ok := iacu.mutation.RabbitmqStage(); ok {
		_spec.SetField(ipaccesscontrol.FieldRabbitmqStage, field.TypeBool, value)
	}
	if value, ok := iacu.mutation.RabbitmqLive(); ok {
		_spec.SetField(ipaccesscontrol.FieldRabbitmqLive, field.TypeBool, value)
	}
	if value, ok := iacu.mutation.TranslationsRmq(); ok {
		_spec.SetField(ipaccesscontrol.FieldTranslationsRmq, field.TypeBool, value)
	}
	if value, ok := iacu.mutation.TranslationsTCP(); ok {
		_spec.SetField(ipaccesscontrol.FieldTranslationsTCP, field.TypeBool, value)
	}
	if value, ok := iacu.mutation.Active(); ok {
		_spec.SetField(ipaccesscontrol.FieldActive, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iacu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaccesscontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iacu.mutation.done = true
	return n, nil
}

// IPAccessControlUpdateOne is the builder for updating a single IPAccessControl entity.
type IPAccessControlUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPAccessControlMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iacuo *IPAccessControlUpdateOne) SetUpdatedAt(t time.Time) *IPAccessControlUpdateOne {
	iacuo.mutation.SetUpdatedAt(t)
	return iacuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (iacuo *IPAccessControlUpdateOne) ClearUpdatedAt() *IPAccessControlUpdateOne {
	iacuo.mutation.ClearUpdatedAt()
	return iacuo
}

// SetUpdatedBy sets the "updated_by" field.
func (iacuo *IPAccessControlUpdateOne) SetUpdatedBy(s string) *IPAccessControlUpdateOne {
	iacuo.mutation.SetUpdatedBy(s)
	return iacuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableUpdatedBy(s *string) *IPAccessControlUpdateOne {
	if s != nil {
		iacuo.SetUpdatedBy(*s)
	}
	return iacuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iacuo *IPAccessControlUpdateOne) ClearUpdatedBy() *IPAccessControlUpdateOne {
	iacuo.mutation.ClearUpdatedBy()
	return iacuo
}

// SetIPAddress sets the "ip_address" field.
func (iacuo *IPAccessControlUpdateOne) SetIPAddress(s string) *IPAccessControlUpdateOne {
	iacuo.mutation.SetIPAddress(s)
	return iacuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableIPAddress(s *string) *IPAccessControlUpdateOne {
	if s != nil {
		iacuo.SetIPAddress(*s)
	}
	return iacuo
}

// SetTCPStage sets the "tcp_stage" field.
func (iacuo *IPAccessControlUpdateOne) SetTCPStage(b bool) *IPAccessControlUpdateOne {
	iacuo.mutation.SetTCPStage(b)
	return iacuo
}

// SetNillableTCPStage sets the "tcp_stage" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableTCPStage(b *bool) *IPAccessControlUpdateOne {
	if b != nil {
		iacuo.SetTCPStage(*b)
	}
	return iacuo
}

// SetTCPLive sets the "tcp_live" field.
func (iacuo *IPAccessControlUpdateOne) SetTCPLive(b bool) *IPAccessControlUpdateOne {
	iacuo.mutation.SetTCPLive(b)
	return iacuo
}

// SetNillableTCPLive sets the "tcp_live" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableTCPLive(b *bool) *IPAccessControlUpdateOne {
	if b != nil {
		iacuo.SetTCPLive(*b)
	}
	return iacuo
}

// SetRabbitmqStage sets the "rabbitmq_stage" field.
func (iacuo *IPAccessControlUpdateOne) SetRabbitmqStage(b bool) *IPAccessControlUpdateOne {
	iacuo.mutation.SetRabbitmqStage(b)
	return iacuo
}

// SetNillableRabbitmqStage sets the "rabbitmq_stage" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableRabbitmqStage(b *bool) *IPAccessControlUpdateOne {
	if b != nil {
		iacuo.SetRabbitmqStage(*b)
	}
	return iacuo
}

// SetRabbitmqLive sets the "rabbitmq_live" field.
func (iacuo *IPAccessControlUpdateOne) SetRabbitmqLive(b bool) *IPAccessControlUpdateOne {
	iacuo.mutation.SetRabbitmqLive(b)
	return iacuo
}

// SetNillableRabbitmqLive sets the "rabbitmq_live" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableRabbitmqLive(b *bool) *IPAccessControlUpdateOne {
	if b != nil {
		iacuo.SetRabbitmqLive(*b)
	}
	return iacuo
}

// SetTranslationsRmq sets the "translations_rmq" field.
func (iacuo *IPAccessControlUpdateOne) SetTranslationsRmq(b bool) *IPAccessControlUpdateOne {
	iacuo.mutation.SetTranslationsRmq(b)
	return iacuo
}

// SetNillableTranslationsRmq sets the "translations_rmq" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableTranslationsRmq(b *bool) *IPAccessControlUpdateOne {
	if b != nil {
		iacuo.SetTranslationsRmq(*b)
	}
	return iacuo
}

// SetTranslationsTCP sets the "translations_tcp" field.
func (iacuo *IPAccessControlUpdateOne) SetTranslationsTCP(b bool) *IPAccessControlUpdateOne {
	iacuo.mutation.SetTranslationsTCP(b)
	return iacuo
}

// SetNillableTranslationsTCP sets the "translations_tcp" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableTranslationsTCP(b *bool) *IPAccessControlUpdateOne {
	if b != nil {
		iacuo.SetTranslationsTCP(*b)
	}
	return iacuo
}

// SetActive sets the "active" field.
func (iacuo *IPAccessControlUpdateOne) SetActive(b bool) *IPAccessControlUpdateOne {
	iacuo.mutation.SetActive(b)
	return iacuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (iacuo *IPAccessControlUpdateOne) SetNillableActive(b *bool) *IPAccessControlUpdateOne {
	if b != nil {
		iacuo.SetActive(*b)
	}
	return iacuo
}

// Mutation returns the IPAccessControlMutation object of the builder.
func (iacuo *IPAccessControlUpdateOne) Mutation() *IPAccessControlMutation {
	return iacuo.mutation
}

// Where appends a list predicates to the IPAccessControlUpdate builder.
func (iacuo *IPAccessControlUpdateOne) Where(ps ...predicate.IPAccessControl) *IPAccessControlUpdateOne {
	iacuo.mutation.Where(ps...)
	return iacuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iacuo *IPAccessControlUpdateOne) Select(field string, fields ...string) *IPAccessControlUpdateOne {
	iacuo.fields = append([]string{field}, fields...)
	return iacuo
}

// Save executes the query and returns the updated IPAccessControl entity.
func (iacuo *IPAccessControlUpdateOne) Save(ctx context.Context) (*IPAccessControl, error) {
	iacuo.defaults()
	return withHooks(ctx, iacuo.sqlSave, iacuo.mutation, iacuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iacuo *IPAccessControlUpdateOne) SaveX(ctx context.Context) *IPAccessControl {
	node, err := iacuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iacuo *IPAccessControlUpdateOne) Exec(ctx context.Context) error {
	_, err := iacuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacuo *IPAccessControlUpdateOne) ExecX(ctx context.Context) {
	if err := iacuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iacuo *IPAccessControlUpdateOne) defaults() {
	if _, ok := iacuo.mutation.UpdatedAt(); !ok && !iacuo.mutation.UpdatedAtCleared() {
		v := ipaccesscontrol.UpdateDefaultUpdatedAt()
		iacuo.mutation.SetUpdatedAt(v)
	}
}

func (iacuo *IPAccessControlUpdateOne) sqlSave(ctx context.Context) (_node *IPAccessControl, err error) {
	_spec := sqlgraph.NewUpdateSpec(ipaccesscontrol.Table, ipaccesscontrol.Columns, sqlgraph.NewFieldSpec(ipaccesscontrol.FieldID, field.TypeInt64))
	id, ok := iacuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IPAccessControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iacuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipaccesscontrol.FieldID)
		for _, f := range fields {
			if !ipaccesscontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ipaccesscontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iacuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iacuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaccesscontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if iacuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(ipaccesscontrol.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := iacuo.mutation.UpdatedBy(); ok {
		_spec.SetField(ipaccesscontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if iacuo.mutation.UpdatedByCleared() {
		_spec.ClearField(ipaccesscontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := iacuo.mutation.IPAddress(); ok {
		_spec.SetField(ipaccesscontrol.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := iacuo.mutation.TCPStage(); ok {
		_spec.SetField(ipaccesscontrol.FieldTCPStage, field.TypeBool, value)
	}
	if value, ok := iacuo.mutation.TCPLive(); ok {
		_spec.SetField(ipaccesscontrol.FieldTCPLive, field.TypeBool, value)
	}
	if value, ok := iacuo.mutation.RabbitmqStage(); ok {
		_spec.SetField(ipaccesscontrol.FieldRabbitmqStage, field.TypeBool, value)
	}
	if value, ok := iacuo.mutation.RabbitmqLive(); ok {
		_spec.SetField(ipaccesscontrol.FieldRabbitmqLive, field.TypeBool, value)
	}
	if value, ok := iacuo.mutation.TranslationsRmq(); ok {
		_spec.SetField(ipaccesscontrol.FieldTranslationsRmq, field.TypeBool, value)
	}
	if value, ok := iacuo.mutation.TranslationsTCP(); ok {
		_spec.SetField(ipaccesscontrol.FieldTranslationsTCP, field.TypeBool, value)
	}
	if value, ok := iacuo.mutation.Active(); ok {
		_spec.SetField(ipaccesscontrol.FieldActive, field.TypeBool, value)
	}
	_node = &IPAccessControl{config: iacuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iacuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaccesscontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iacuo.mutation.done = true
	return _node, nil
}
