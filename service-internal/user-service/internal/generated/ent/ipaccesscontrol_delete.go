// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/khuongdo95/go-service/internal/generated/ent/ipaccesscontrol"
	"github.com/khuongdo95/go-service/internal/generated/ent/predicate"
)

// IPAccessControlDelete is the builder for deleting a IPAccessControl entity.
type IPAccessControlDelete struct {
	config
	hooks    []Hook
	mutation *IPAccessControlMutation
}

// Where appends a list predicates to the IPAccessControlDelete builder.
func (iacd *IPAccessControlDelete) Where(ps ...predicate.IPAccessControl) *IPAccessControlDelete {
	iacd.mutation.Where(ps...)
	return iacd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iacd *IPAccessControlDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iacd.sqlExec, iacd.mutation, iacd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iacd *IPAccessControlDelete) ExecX(ctx context.Context) int {
	n, err := iacd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iacd *IPAccessControlDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ipaccesscontrol.Table, sqlgraph.NewFieldSpec(ipaccesscontrol.FieldID, field.TypeInt64))
	if ps := iacd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iacd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iacd.mutation.done = true
	return affected, err
}

// IPAccessControlDeleteOne is the builder for deleting a single IPAccessControl entity.
type IPAccessControlDeleteOne struct {
	iacd *IPAccessControlDelete
}

// Where appends a list predicates to the IPAccessControlDelete builder.
func (iacdo *IPAccessControlDeleteOne) Where(ps ...predicate.IPAccessControl) *IPAccessControlDeleteOne {
	iacdo.iacd.mutation.Where(ps...)
	return iacdo
}

// Exec executes the deletion query.
func (iacdo *IPAccessControlDeleteOne) Exec(ctx context.Context) error {
	n, err := iacdo.iacd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ipaccesscontrol.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iacdo *IPAccessControlDeleteOne) ExecX(ctx context.Context) {
	if err := iacdo.Exec(ctx); err != nil {
		panic(err)
	}
}
